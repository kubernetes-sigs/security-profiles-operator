# -*- mode: ruby -*-
# vi: set ft=ruby :
###
# Use this file to emulate CI tests in a local VM
#   cd on the project root
#   ln -s hack/ci/Vagrantfile-ubuntu-local Vagrantfile; vagrant destroy -f; vagrant up
# In Windows Vagrant can be **really** slow 
#   https://github.com/hashicorp/vagrant/issues/11853
# Some users had some benfit enabling Hyper-v paravirtualization interface from VBox interface in System/Acceleration
#   and in your OS
###
# source ./vagrant_vars.sh
$set_environment_variables = <<SCRIPT
tee "/etc/profile.d/myvars.sh" > "/dev/null" <<EOF
# GO environment variables.
export PATH="/usr/local/go/bin:$PATH"
export GOPATH="$HOME/go"
export GOBIN="$GOPATH/bin"
EOF
SCRIPT


Vagrant.configure("2") do |config|
  config.vm.box = "generic/ubuntu2204"
  memory = 6144
  cpus = 4

  config.vm.provider :virtualbox do |v|
    v.memory = memory
    v.cpus = cpus
  end

  config.vm.provider :libvirt do |v|
    v.memory = memory
    v.cpus = cpus
  end

  config.vm.synced_folder ".", "/vagrant"
  config.vm.provision "shell", inline: $set_environment_variables, run: "always"

  config.vm.provision "install-dependencies", type: "shell", run: "once" do |sh|
    sh.inline = <<~SHELL
      set -euxo pipefail

      # Use a non-localhost DNS to avoid cluster DNS lookup loops
      echo "nameserver 8.8.8.8" > /etc/resolv.conf

      GO_VERSION=1.20
      curl -sSfL -o- https://dl.google.com/go/go"$GO_VERSION".linux-amd64.tar.gz |
        tar xfz - -C /usr/local
      export PATH="/usr/local/go/bin:$PATH"
      export GOPATH="$HOME/go"
      export GOBIN="$GOPATH/bin"

      # Kubernetes
      curl -fsSLo /etc/apt/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
      echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" > /etc/apt/sources.list.d/kubernetes.list
      KUBERNETES_VERSION=1.25.3-00

      # Reduce output to increase logs readibility
      set +x
      echo "> Updating apt repos.."
      apt-get update >/dev/null
      apt-get install -y \
        build-essential \
        kubelet=$KUBERNETES_VERSION \
        kubeadm=$KUBERNETES_VERSION \
        kubectl=$KUBERNETES_VERSION \
        podman \
        jq \
        moreutils \
        pkg-config \
        lxc-dev \
        seccomp \
        libseccomp-dev \
        apparmor-easyprof apparmor-notify apparmor-utils \
        libapparmor-dev \
        libelf-dev zlib1g-dev \
        >/dev/null
      set -x

      # Disable kernel print rate limiting for syslog messaging
      sysctl -w kernel.printk_ratelimit=0
      sysctl -w kernel.printk_ratelimit_burst=0

      set +x
      /vagrant/hack/install-libbpf.sh >/dev/null

      # Build app image
      #   sudo is needed to make dockerfiles nix-build step work.
      echo "> Building app image from Dockerfile.."
      sudo -i -u vagrant make -C /vagrant image \ 
        && sudo -u vagrant podman save -o /vagrant/image.tar security-profiles-operator \
        && podman load -i /vagrant/image.tar \
        || echo "===>>> ERROR creating app image. Going forward configuring the VM."

      /vagrant/hack/ci/install-cri-o.sh >/dev/null 2>&1
      set -x

      # Disable IPv6 in bridge plugin config
      CNI_CONFIG=/etc/cni/net.d/10-crio-bridge.conf
      jq 'del(.ipam.routes[1], .ipam.ranges[1])' $CNI_CONFIG | sponge $CNI_CONFIG

      # Setup cluster
      IP=`ip route get 1.2.3.4 | cut -d ' ' -f7 | tr -d '[:space:]'`
      NODENAME=$(hostname -s)
      swapoff -a
      modprobe br_netfilter
      sysctl -w net.ipv4.ip_forward=1
      kubeadm init --apiserver-cert-extra-sans=$IP --node-name $NODENAME

      # Setup kubectl
      mkdir /home/vagrant/.kube
      cp /etc/kubernetes/admin.conf /home/vagrant/.kube/config
      chown -R vagrant:vagrant /home/vagrant/.kube

      # Configure cluster
      export KUBECONFIG=/etc/kubernetes/admin.conf

      # Detecting changes to files in the module cache after a module has been downloaded and verified.
      cd /vagrant
      go mod verify >/dev/null || echo ">>> ERROR verifying modules hashes"
      set +x

      # Verify pre-requirements.
      #  Run in background as many tests as possible (<=CPU) and redirect output to a log file.
      make -C /vagrant test-unit >/tmp/test_unit.log 2>&1 &
      test_unit_pid=$!
      make -C /vagrant verify-dependencies >/tmp/test_verify_dependencies.log 2>&1 &
      test_verify_dependencies_pid=$!
      make -C /vagrant verify-toc >/tmp/test_verify_toc.log 2>&1 &
      test_verify_toc_pid=$!
      make -C /vagrant verify-mocks >/tmp/test_verify_mocks.log 2>&1 &
      test_verify_mocks_pid=$!
      wait $test_unit_pid
      wait $test_verify_dependencies
      wait $test_verify_toc_pid
      wait $test_verify_mocks_pid

      make -C /vagrant verify-bpf
      make -C /vagrant verify-btf
      make -C /vagrant verify-format

      # Wait for K8S nodes to be ready
      kubectl taint nodes --all node-role.kubernetes.io/control-plane-
      kubectl wait --for=condition=ready --timeout=60s node ubuntu2204
      
      # E2E tests
      hack/ci/e2e-ubuntu.sh
    SHELL
  end
end
