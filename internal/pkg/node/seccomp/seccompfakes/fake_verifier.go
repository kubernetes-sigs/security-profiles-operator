/*
Copyright 2020 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by counterfeiter. DO NOT EDIT.
package seccompfakes

import (
	"sync"

	"github.com/go-logr/logr"
)

type FakeVerifier struct {
	ParseStatusFileStub        func(logr.Logger, string) (map[string]string, error)
	parseStatusFileMutex       sync.RWMutex
	parseStatusFileArgsForCall []struct {
		arg1 logr.Logger
		arg2 string
	}
	parseStatusFileReturns struct {
		result1 map[string]string
		result2 error
	}
	parseStatusFileReturnsOnCall map[int]struct {
		result1 map[string]string
		result2 error
	}
	PrctlStub        func(int, uintptr, uintptr, uintptr, uintptr) error
	prctlMutex       sync.RWMutex
	prctlArgsForCall []struct {
		arg1 int
		arg2 uintptr
		arg3 uintptr
		arg4 uintptr
		arg5 uintptr
	}
	prctlReturns struct {
		result1 error
	}
	prctlReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeVerifier) ParseStatusFile(arg1 logr.Logger, arg2 string) (map[string]string, error) {
	fake.parseStatusFileMutex.Lock()
	ret, specificReturn := fake.parseStatusFileReturnsOnCall[len(fake.parseStatusFileArgsForCall)]
	fake.parseStatusFileArgsForCall = append(fake.parseStatusFileArgsForCall, struct {
		arg1 logr.Logger
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("ParseStatusFile", []interface{}{arg1, arg2})
	fake.parseStatusFileMutex.Unlock()
	if fake.ParseStatusFileStub != nil {
		return fake.ParseStatusFileStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.parseStatusFileReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVerifier) ParseStatusFileCallCount() int {
	fake.parseStatusFileMutex.RLock()
	defer fake.parseStatusFileMutex.RUnlock()
	return len(fake.parseStatusFileArgsForCall)
}

func (fake *FakeVerifier) ParseStatusFileCalls(stub func(logr.Logger, string) (map[string]string, error)) {
	fake.parseStatusFileMutex.Lock()
	defer fake.parseStatusFileMutex.Unlock()
	fake.ParseStatusFileStub = stub
}

func (fake *FakeVerifier) ParseStatusFileArgsForCall(i int) (logr.Logger, string) {
	fake.parseStatusFileMutex.RLock()
	defer fake.parseStatusFileMutex.RUnlock()
	argsForCall := fake.parseStatusFileArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeVerifier) ParseStatusFileReturns(result1 map[string]string, result2 error) {
	fake.parseStatusFileMutex.Lock()
	defer fake.parseStatusFileMutex.Unlock()
	fake.ParseStatusFileStub = nil
	fake.parseStatusFileReturns = struct {
		result1 map[string]string
		result2 error
	}{result1, result2}
}

func (fake *FakeVerifier) ParseStatusFileReturnsOnCall(i int, result1 map[string]string, result2 error) {
	fake.parseStatusFileMutex.Lock()
	defer fake.parseStatusFileMutex.Unlock()
	fake.ParseStatusFileStub = nil
	if fake.parseStatusFileReturnsOnCall == nil {
		fake.parseStatusFileReturnsOnCall = make(map[int]struct {
			result1 map[string]string
			result2 error
		})
	}
	fake.parseStatusFileReturnsOnCall[i] = struct {
		result1 map[string]string
		result2 error
	}{result1, result2}
}

func (fake *FakeVerifier) Prctl(arg1 int, arg2 uintptr, arg3 uintptr, arg4 uintptr, arg5 uintptr) error {
	fake.prctlMutex.Lock()
	ret, specificReturn := fake.prctlReturnsOnCall[len(fake.prctlArgsForCall)]
	fake.prctlArgsForCall = append(fake.prctlArgsForCall, struct {
		arg1 int
		arg2 uintptr
		arg3 uintptr
		arg4 uintptr
		arg5 uintptr
	}{arg1, arg2, arg3, arg4, arg5})
	fake.recordInvocation("Prctl", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.prctlMutex.Unlock()
	if fake.PrctlStub != nil {
		return fake.PrctlStub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.prctlReturns
	return fakeReturns.result1
}

func (fake *FakeVerifier) PrctlCallCount() int {
	fake.prctlMutex.RLock()
	defer fake.prctlMutex.RUnlock()
	return len(fake.prctlArgsForCall)
}

func (fake *FakeVerifier) PrctlCalls(stub func(int, uintptr, uintptr, uintptr, uintptr) error) {
	fake.prctlMutex.Lock()
	defer fake.prctlMutex.Unlock()
	fake.PrctlStub = stub
}

func (fake *FakeVerifier) PrctlArgsForCall(i int) (int, uintptr, uintptr, uintptr, uintptr) {
	fake.prctlMutex.RLock()
	defer fake.prctlMutex.RUnlock()
	argsForCall := fake.prctlArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeVerifier) PrctlReturns(result1 error) {
	fake.prctlMutex.Lock()
	defer fake.prctlMutex.Unlock()
	fake.PrctlStub = nil
	fake.prctlReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeVerifier) PrctlReturnsOnCall(i int, result1 error) {
	fake.prctlMutex.Lock()
	defer fake.prctlMutex.Unlock()
	fake.PrctlStub = nil
	if fake.prctlReturnsOnCall == nil {
		fake.prctlReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.prctlReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeVerifier) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.parseStatusFileMutex.RLock()
	defer fake.parseStatusFileMutex.RUnlock()
	fake.prctlMutex.RLock()
	defer fake.prctlMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeVerifier) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
