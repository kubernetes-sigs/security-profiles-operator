/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by counterfeiter. DO NOT EDIT.
package podexecfakes

import (
	"context"
	"sync"
)

type FakeImpl struct {
	IsPodExecWebhookEnabledStub        func(context.Context) bool
	isPodExecWebhookEnabledMutex       sync.RWMutex
	isPodExecWebhookEnabledArgsForCall []struct {
		arg1 context.Context
	}
	isPodExecWebhookEnabledReturns struct {
		result1 bool
	}
	isPodExecWebhookEnabledReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeImpl) IsPodExecWebhookEnabled(arg1 context.Context) bool {
	fake.isPodExecWebhookEnabledMutex.Lock()
	ret, specificReturn := fake.isPodExecWebhookEnabledReturnsOnCall[len(fake.isPodExecWebhookEnabledArgsForCall)]
	fake.isPodExecWebhookEnabledArgsForCall = append(fake.isPodExecWebhookEnabledArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.IsPodExecWebhookEnabledStub
	fakeReturns := fake.isPodExecWebhookEnabledReturns
	fake.recordInvocation("IsPodExecWebhookEnabled", []interface{}{arg1})
	fake.isPodExecWebhookEnabledMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeImpl) IsPodExecWebhookEnabledCallCount() int {
	fake.isPodExecWebhookEnabledMutex.RLock()
	defer fake.isPodExecWebhookEnabledMutex.RUnlock()
	return len(fake.isPodExecWebhookEnabledArgsForCall)
}

func (fake *FakeImpl) IsPodExecWebhookEnabledCalls(stub func(context.Context) bool) {
	fake.isPodExecWebhookEnabledMutex.Lock()
	defer fake.isPodExecWebhookEnabledMutex.Unlock()
	fake.IsPodExecWebhookEnabledStub = stub
}

func (fake *FakeImpl) IsPodExecWebhookEnabledArgsForCall(i int) context.Context {
	fake.isPodExecWebhookEnabledMutex.RLock()
	defer fake.isPodExecWebhookEnabledMutex.RUnlock()
	argsForCall := fake.isPodExecWebhookEnabledArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeImpl) IsPodExecWebhookEnabledReturns(result1 bool) {
	fake.isPodExecWebhookEnabledMutex.Lock()
	defer fake.isPodExecWebhookEnabledMutex.Unlock()
	fake.IsPodExecWebhookEnabledStub = nil
	fake.isPodExecWebhookEnabledReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeImpl) IsPodExecWebhookEnabledReturnsOnCall(i int, result1 bool) {
	fake.isPodExecWebhookEnabledMutex.Lock()
	defer fake.isPodExecWebhookEnabledMutex.Unlock()
	fake.IsPodExecWebhookEnabledStub = nil
	if fake.isPodExecWebhookEnabledReturnsOnCall == nil {
		fake.isPodExecWebhookEnabledReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isPodExecWebhookEnabledReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeImpl) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.isPodExecWebhookEnabledMutex.RLock()
	defer fake.isPodExecWebhookEnabledMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeImpl) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
