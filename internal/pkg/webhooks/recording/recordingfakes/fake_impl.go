/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by counterfeiter. DO NOT EDIT.
package recordingfakes

import (
	"context"
	"sync"

	"github.com/go-logr/logr"
	v1 "k8s.io/api/core/v1"
	v1a "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
	"sigs.k8s.io/security-profiles-operator/api/profilerecording/v1alpha1"
)

type FakeImpl struct {
	DecodePodStub        func(admission.Request) (*v1.Pod, error)
	decodePodMutex       sync.RWMutex
	decodePodArgsForCall []struct {
		arg1 admission.Request
	}
	decodePodReturns struct {
		result1 *v1.Pod
		result2 error
	}
	decodePodReturnsOnCall map[int]struct {
		result1 *v1.Pod
		result2 error
	}
	LabelSelectorAsSelectorStub        func(*v1a.LabelSelector) (labels.Selector, error)
	labelSelectorAsSelectorMutex       sync.RWMutex
	labelSelectorAsSelectorArgsForCall []struct {
		arg1 *v1a.LabelSelector
	}
	labelSelectorAsSelectorReturns struct {
		result1 labels.Selector
		result2 error
	}
	labelSelectorAsSelectorReturnsOnCall map[int]struct {
		result1 labels.Selector
		result2 error
	}
	ListProfileRecordingsStub        func(context.Context, ...client.ListOption) (*v1alpha1.ProfileRecordingList, error)
	listProfileRecordingsMutex       sync.RWMutex
	listProfileRecordingsArgsForCall []struct {
		arg1 context.Context
		arg2 []client.ListOption
	}
	listProfileRecordingsReturns struct {
		result1 *v1alpha1.ProfileRecordingList
		result2 error
	}
	listProfileRecordingsReturnsOnCall map[int]struct {
		result1 *v1alpha1.ProfileRecordingList
		result2 error
	}
	SetDecoderStub        func(*admission.Decoder)
	setDecoderMutex       sync.RWMutex
	setDecoderArgsForCall []struct {
		arg1 *admission.Decoder
	}
	UpdateResourceStub        func(context.Context, logr.Logger, client.Object, string) error
	updateResourceMutex       sync.RWMutex
	updateResourceArgsForCall []struct {
		arg1 context.Context
		arg2 logr.Logger
		arg3 client.Object
		arg4 string
	}
	updateResourceReturns struct {
		result1 error
	}
	updateResourceReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeImpl) DecodePod(arg1 admission.Request) (*v1.Pod, error) {
	fake.decodePodMutex.Lock()
	ret, specificReturn := fake.decodePodReturnsOnCall[len(fake.decodePodArgsForCall)]
	fake.decodePodArgsForCall = append(fake.decodePodArgsForCall, struct {
		arg1 admission.Request
	}{arg1})
	stub := fake.DecodePodStub
	fakeReturns := fake.decodePodReturns
	fake.recordInvocation("DecodePod", []interface{}{arg1})
	fake.decodePodMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeImpl) DecodePodCallCount() int {
	fake.decodePodMutex.RLock()
	defer fake.decodePodMutex.RUnlock()
	return len(fake.decodePodArgsForCall)
}

func (fake *FakeImpl) DecodePodCalls(stub func(admission.Request) (*v1.Pod, error)) {
	fake.decodePodMutex.Lock()
	defer fake.decodePodMutex.Unlock()
	fake.DecodePodStub = stub
}

func (fake *FakeImpl) DecodePodArgsForCall(i int) admission.Request {
	fake.decodePodMutex.RLock()
	defer fake.decodePodMutex.RUnlock()
	argsForCall := fake.decodePodArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeImpl) DecodePodReturns(result1 *v1.Pod, result2 error) {
	fake.decodePodMutex.Lock()
	defer fake.decodePodMutex.Unlock()
	fake.DecodePodStub = nil
	fake.decodePodReturns = struct {
		result1 *v1.Pod
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) DecodePodReturnsOnCall(i int, result1 *v1.Pod, result2 error) {
	fake.decodePodMutex.Lock()
	defer fake.decodePodMutex.Unlock()
	fake.DecodePodStub = nil
	if fake.decodePodReturnsOnCall == nil {
		fake.decodePodReturnsOnCall = make(map[int]struct {
			result1 *v1.Pod
			result2 error
		})
	}
	fake.decodePodReturnsOnCall[i] = struct {
		result1 *v1.Pod
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) LabelSelectorAsSelector(arg1 *v1a.LabelSelector) (labels.Selector, error) {
	fake.labelSelectorAsSelectorMutex.Lock()
	ret, specificReturn := fake.labelSelectorAsSelectorReturnsOnCall[len(fake.labelSelectorAsSelectorArgsForCall)]
	fake.labelSelectorAsSelectorArgsForCall = append(fake.labelSelectorAsSelectorArgsForCall, struct {
		arg1 *v1a.LabelSelector
	}{arg1})
	stub := fake.LabelSelectorAsSelectorStub
	fakeReturns := fake.labelSelectorAsSelectorReturns
	fake.recordInvocation("LabelSelectorAsSelector", []interface{}{arg1})
	fake.labelSelectorAsSelectorMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeImpl) LabelSelectorAsSelectorCallCount() int {
	fake.labelSelectorAsSelectorMutex.RLock()
	defer fake.labelSelectorAsSelectorMutex.RUnlock()
	return len(fake.labelSelectorAsSelectorArgsForCall)
}

func (fake *FakeImpl) LabelSelectorAsSelectorCalls(stub func(*v1a.LabelSelector) (labels.Selector, error)) {
	fake.labelSelectorAsSelectorMutex.Lock()
	defer fake.labelSelectorAsSelectorMutex.Unlock()
	fake.LabelSelectorAsSelectorStub = stub
}

func (fake *FakeImpl) LabelSelectorAsSelectorArgsForCall(i int) *v1a.LabelSelector {
	fake.labelSelectorAsSelectorMutex.RLock()
	defer fake.labelSelectorAsSelectorMutex.RUnlock()
	argsForCall := fake.labelSelectorAsSelectorArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeImpl) LabelSelectorAsSelectorReturns(result1 labels.Selector, result2 error) {
	fake.labelSelectorAsSelectorMutex.Lock()
	defer fake.labelSelectorAsSelectorMutex.Unlock()
	fake.LabelSelectorAsSelectorStub = nil
	fake.labelSelectorAsSelectorReturns = struct {
		result1 labels.Selector
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) LabelSelectorAsSelectorReturnsOnCall(i int, result1 labels.Selector, result2 error) {
	fake.labelSelectorAsSelectorMutex.Lock()
	defer fake.labelSelectorAsSelectorMutex.Unlock()
	fake.LabelSelectorAsSelectorStub = nil
	if fake.labelSelectorAsSelectorReturnsOnCall == nil {
		fake.labelSelectorAsSelectorReturnsOnCall = make(map[int]struct {
			result1 labels.Selector
			result2 error
		})
	}
	fake.labelSelectorAsSelectorReturnsOnCall[i] = struct {
		result1 labels.Selector
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) ListProfileRecordings(arg1 context.Context, arg2 ...client.ListOption) (*v1alpha1.ProfileRecordingList, error) {
	fake.listProfileRecordingsMutex.Lock()
	ret, specificReturn := fake.listProfileRecordingsReturnsOnCall[len(fake.listProfileRecordingsArgsForCall)]
	fake.listProfileRecordingsArgsForCall = append(fake.listProfileRecordingsArgsForCall, struct {
		arg1 context.Context
		arg2 []client.ListOption
	}{arg1, arg2})
	stub := fake.ListProfileRecordingsStub
	fakeReturns := fake.listProfileRecordingsReturns
	fake.recordInvocation("ListProfileRecordings", []interface{}{arg1, arg2})
	fake.listProfileRecordingsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeImpl) ListProfileRecordingsCallCount() int {
	fake.listProfileRecordingsMutex.RLock()
	defer fake.listProfileRecordingsMutex.RUnlock()
	return len(fake.listProfileRecordingsArgsForCall)
}

func (fake *FakeImpl) ListProfileRecordingsCalls(stub func(context.Context, ...client.ListOption) (*v1alpha1.ProfileRecordingList, error)) {
	fake.listProfileRecordingsMutex.Lock()
	defer fake.listProfileRecordingsMutex.Unlock()
	fake.ListProfileRecordingsStub = stub
}

func (fake *FakeImpl) ListProfileRecordingsArgsForCall(i int) (context.Context, []client.ListOption) {
	fake.listProfileRecordingsMutex.RLock()
	defer fake.listProfileRecordingsMutex.RUnlock()
	argsForCall := fake.listProfileRecordingsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeImpl) ListProfileRecordingsReturns(result1 *v1alpha1.ProfileRecordingList, result2 error) {
	fake.listProfileRecordingsMutex.Lock()
	defer fake.listProfileRecordingsMutex.Unlock()
	fake.ListProfileRecordingsStub = nil
	fake.listProfileRecordingsReturns = struct {
		result1 *v1alpha1.ProfileRecordingList
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) ListProfileRecordingsReturnsOnCall(i int, result1 *v1alpha1.ProfileRecordingList, result2 error) {
	fake.listProfileRecordingsMutex.Lock()
	defer fake.listProfileRecordingsMutex.Unlock()
	fake.ListProfileRecordingsStub = nil
	if fake.listProfileRecordingsReturnsOnCall == nil {
		fake.listProfileRecordingsReturnsOnCall = make(map[int]struct {
			result1 *v1alpha1.ProfileRecordingList
			result2 error
		})
	}
	fake.listProfileRecordingsReturnsOnCall[i] = struct {
		result1 *v1alpha1.ProfileRecordingList
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) SetDecoder(arg1 *admission.Decoder) {
	fake.setDecoderMutex.Lock()
	fake.setDecoderArgsForCall = append(fake.setDecoderArgsForCall, struct {
		arg1 *admission.Decoder
	}{arg1})
	stub := fake.SetDecoderStub
	fake.recordInvocation("SetDecoder", []interface{}{arg1})
	fake.setDecoderMutex.Unlock()
	if stub != nil {
		fake.SetDecoderStub(arg1)
	}
}

func (fake *FakeImpl) SetDecoderCallCount() int {
	fake.setDecoderMutex.RLock()
	defer fake.setDecoderMutex.RUnlock()
	return len(fake.setDecoderArgsForCall)
}

func (fake *FakeImpl) SetDecoderCalls(stub func(*admission.Decoder)) {
	fake.setDecoderMutex.Lock()
	defer fake.setDecoderMutex.Unlock()
	fake.SetDecoderStub = stub
}

func (fake *FakeImpl) SetDecoderArgsForCall(i int) *admission.Decoder {
	fake.setDecoderMutex.RLock()
	defer fake.setDecoderMutex.RUnlock()
	argsForCall := fake.setDecoderArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeImpl) UpdateResource(arg1 context.Context, arg2 logr.Logger, arg3 client.Object, arg4 string) error {
	fake.updateResourceMutex.Lock()
	ret, specificReturn := fake.updateResourceReturnsOnCall[len(fake.updateResourceArgsForCall)]
	fake.updateResourceArgsForCall = append(fake.updateResourceArgsForCall, struct {
		arg1 context.Context
		arg2 logr.Logger
		arg3 client.Object
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.UpdateResourceStub
	fakeReturns := fake.updateResourceReturns
	fake.recordInvocation("UpdateResource", []interface{}{arg1, arg2, arg3, arg4})
	fake.updateResourceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeImpl) UpdateResourceCallCount() int {
	fake.updateResourceMutex.RLock()
	defer fake.updateResourceMutex.RUnlock()
	return len(fake.updateResourceArgsForCall)
}

func (fake *FakeImpl) UpdateResourceCalls(stub func(context.Context, logr.Logger, client.Object, string) error) {
	fake.updateResourceMutex.Lock()
	defer fake.updateResourceMutex.Unlock()
	fake.UpdateResourceStub = stub
}

func (fake *FakeImpl) UpdateResourceArgsForCall(i int) (context.Context, logr.Logger, client.Object, string) {
	fake.updateResourceMutex.RLock()
	defer fake.updateResourceMutex.RUnlock()
	argsForCall := fake.updateResourceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeImpl) UpdateResourceReturns(result1 error) {
	fake.updateResourceMutex.Lock()
	defer fake.updateResourceMutex.Unlock()
	fake.UpdateResourceStub = nil
	fake.updateResourceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeImpl) UpdateResourceReturnsOnCall(i int, result1 error) {
	fake.updateResourceMutex.Lock()
	defer fake.updateResourceMutex.Unlock()
	fake.UpdateResourceStub = nil
	if fake.updateResourceReturnsOnCall == nil {
		fake.updateResourceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateResourceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeImpl) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.decodePodMutex.RLock()
	defer fake.decodePodMutex.RUnlock()
	fake.labelSelectorAsSelectorMutex.RLock()
	defer fake.labelSelectorAsSelectorMutex.RUnlock()
	fake.listProfileRecordingsMutex.RLock()
	defer fake.listProfileRecordingsMutex.RUnlock()
	fake.setDecoderMutex.RLock()
	defer fake.setDecoderMutex.RUnlock()
	fake.updateResourceMutex.RLock()
	defer fake.updateResourceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeImpl) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
