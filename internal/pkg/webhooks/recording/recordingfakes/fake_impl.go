/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by counterfeiter. DO NOT EDIT.
package recordingfakes

import (
	"context"
	"sync"

	"github.com/go-logr/logr"
	v1 "k8s.io/api/core/v1"
	v1a "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
	"sigs.k8s.io/security-profiles-operator/api/profilerecording/v1alpha1"
)

type FakeImpl struct {
	DecodePodStub        func(admission.Request) (*v1.Pod, error)
	decodePodMutex       sync.RWMutex
	decodePodArgsForCall []struct {
		arg1 admission.Request
	}
	decodePodReturns struct {
		result1 *v1.Pod
		result2 error
	}
	decodePodReturnsOnCall map[int]struct {
		result1 *v1.Pod
		result2 error
	}
	GetOperatorNamespaceStub        func() string
	getOperatorNamespaceMutex       sync.RWMutex
	getOperatorNamespaceArgsForCall []struct {
	}
	getOperatorNamespaceReturns struct {
		result1 string
	}
	getOperatorNamespaceReturnsOnCall map[int]struct {
		result1 string
	}
	GetProfileRecordingStub        func(context.Context, string, string) (*v1alpha1.ProfileRecording, error)
	getProfileRecordingMutex       sync.RWMutex
	getProfileRecordingArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	getProfileRecordingReturns struct {
		result1 *v1alpha1.ProfileRecording
		result2 error
	}
	getProfileRecordingReturnsOnCall map[int]struct {
		result1 *v1alpha1.ProfileRecording
		result2 error
	}
	LabelSelectorAsSelectorStub        func(*v1a.LabelSelector) (labels.Selector, error)
	labelSelectorAsSelectorMutex       sync.RWMutex
	labelSelectorAsSelectorArgsForCall []struct {
		arg1 *v1a.LabelSelector
	}
	labelSelectorAsSelectorReturns struct {
		result1 labels.Selector
		result2 error
	}
	labelSelectorAsSelectorReturnsOnCall map[int]struct {
		result1 labels.Selector
		result2 error
	}
	ListProfileRecordingsStub        func(context.Context, ...client.ListOption) (*v1alpha1.ProfileRecordingList, error)
	listProfileRecordingsMutex       sync.RWMutex
	listProfileRecordingsArgsForCall []struct {
		arg1 context.Context
		arg2 []client.ListOption
	}
	listProfileRecordingsReturns struct {
		result1 *v1alpha1.ProfileRecordingList
		result2 error
	}
	listProfileRecordingsReturnsOnCall map[int]struct {
		result1 *v1alpha1.ProfileRecordingList
		result2 error
	}
	ListRecordedPodsStub        func(context.Context, string, *v1a.LabelSelector) (*v1.PodList, error)
	listRecordedPodsMutex       sync.RWMutex
	listRecordedPodsArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *v1a.LabelSelector
	}
	listRecordedPodsReturns struct {
		result1 *v1.PodList
		result2 error
	}
	listRecordedPodsReturnsOnCall map[int]struct {
		result1 *v1.PodList
		result2 error
	}
	UpdateResourceStub        func(context.Context, logr.Logger, client.Object, string) error
	updateResourceMutex       sync.RWMutex
	updateResourceArgsForCall []struct {
		arg1 context.Context
		arg2 logr.Logger
		arg3 client.Object
		arg4 string
	}
	updateResourceReturns struct {
		result1 error
	}
	updateResourceReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateResourceStatusStub        func(context.Context, logr.Logger, client.Object, string) error
	updateResourceStatusMutex       sync.RWMutex
	updateResourceStatusArgsForCall []struct {
		arg1 context.Context
		arg2 logr.Logger
		arg3 client.Object
		arg4 string
	}
	updateResourceStatusReturns struct {
		result1 error
	}
	updateResourceStatusReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeImpl) DecodePod(arg1 admission.Request) (*v1.Pod, error) {
	fake.decodePodMutex.Lock()
	ret, specificReturn := fake.decodePodReturnsOnCall[len(fake.decodePodArgsForCall)]
	fake.decodePodArgsForCall = append(fake.decodePodArgsForCall, struct {
		arg1 admission.Request
	}{arg1})
	stub := fake.DecodePodStub
	fakeReturns := fake.decodePodReturns
	fake.recordInvocation("DecodePod", []interface{}{arg1})
	fake.decodePodMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeImpl) DecodePodCallCount() int {
	fake.decodePodMutex.RLock()
	defer fake.decodePodMutex.RUnlock()
	return len(fake.decodePodArgsForCall)
}

func (fake *FakeImpl) DecodePodCalls(stub func(admission.Request) (*v1.Pod, error)) {
	fake.decodePodMutex.Lock()
	defer fake.decodePodMutex.Unlock()
	fake.DecodePodStub = stub
}

func (fake *FakeImpl) DecodePodArgsForCall(i int) admission.Request {
	fake.decodePodMutex.RLock()
	defer fake.decodePodMutex.RUnlock()
	argsForCall := fake.decodePodArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeImpl) DecodePodReturns(result1 *v1.Pod, result2 error) {
	fake.decodePodMutex.Lock()
	defer fake.decodePodMutex.Unlock()
	fake.DecodePodStub = nil
	fake.decodePodReturns = struct {
		result1 *v1.Pod
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) DecodePodReturnsOnCall(i int, result1 *v1.Pod, result2 error) {
	fake.decodePodMutex.Lock()
	defer fake.decodePodMutex.Unlock()
	fake.DecodePodStub = nil
	if fake.decodePodReturnsOnCall == nil {
		fake.decodePodReturnsOnCall = make(map[int]struct {
			result1 *v1.Pod
			result2 error
		})
	}
	fake.decodePodReturnsOnCall[i] = struct {
		result1 *v1.Pod
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) GetOperatorNamespace() string {
	fake.getOperatorNamespaceMutex.Lock()
	ret, specificReturn := fake.getOperatorNamespaceReturnsOnCall[len(fake.getOperatorNamespaceArgsForCall)]
	fake.getOperatorNamespaceArgsForCall = append(fake.getOperatorNamespaceArgsForCall, struct {
	}{})
	stub := fake.GetOperatorNamespaceStub
	fakeReturns := fake.getOperatorNamespaceReturns
	fake.recordInvocation("GetOperatorNamespace", []interface{}{})
	fake.getOperatorNamespaceMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeImpl) GetOperatorNamespaceCallCount() int {
	fake.getOperatorNamespaceMutex.RLock()
	defer fake.getOperatorNamespaceMutex.RUnlock()
	return len(fake.getOperatorNamespaceArgsForCall)
}

func (fake *FakeImpl) GetOperatorNamespaceCalls(stub func() string) {
	fake.getOperatorNamespaceMutex.Lock()
	defer fake.getOperatorNamespaceMutex.Unlock()
	fake.GetOperatorNamespaceStub = stub
}

func (fake *FakeImpl) GetOperatorNamespaceReturns(result1 string) {
	fake.getOperatorNamespaceMutex.Lock()
	defer fake.getOperatorNamespaceMutex.Unlock()
	fake.GetOperatorNamespaceStub = nil
	fake.getOperatorNamespaceReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeImpl) GetOperatorNamespaceReturnsOnCall(i int, result1 string) {
	fake.getOperatorNamespaceMutex.Lock()
	defer fake.getOperatorNamespaceMutex.Unlock()
	fake.GetOperatorNamespaceStub = nil
	if fake.getOperatorNamespaceReturnsOnCall == nil {
		fake.getOperatorNamespaceReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getOperatorNamespaceReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeImpl) GetProfileRecording(arg1 context.Context, arg2 string, arg3 string) (*v1alpha1.ProfileRecording, error) {
	fake.getProfileRecordingMutex.Lock()
	ret, specificReturn := fake.getProfileRecordingReturnsOnCall[len(fake.getProfileRecordingArgsForCall)]
	fake.getProfileRecordingArgsForCall = append(fake.getProfileRecordingArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.GetProfileRecordingStub
	fakeReturns := fake.getProfileRecordingReturns
	fake.recordInvocation("GetProfileRecording", []interface{}{arg1, arg2, arg3})
	fake.getProfileRecordingMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeImpl) GetProfileRecordingCallCount() int {
	fake.getProfileRecordingMutex.RLock()
	defer fake.getProfileRecordingMutex.RUnlock()
	return len(fake.getProfileRecordingArgsForCall)
}

func (fake *FakeImpl) GetProfileRecordingCalls(stub func(context.Context, string, string) (*v1alpha1.ProfileRecording, error)) {
	fake.getProfileRecordingMutex.Lock()
	defer fake.getProfileRecordingMutex.Unlock()
	fake.GetProfileRecordingStub = stub
}

func (fake *FakeImpl) GetProfileRecordingArgsForCall(i int) (context.Context, string, string) {
	fake.getProfileRecordingMutex.RLock()
	defer fake.getProfileRecordingMutex.RUnlock()
	argsForCall := fake.getProfileRecordingArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeImpl) GetProfileRecordingReturns(result1 *v1alpha1.ProfileRecording, result2 error) {
	fake.getProfileRecordingMutex.Lock()
	defer fake.getProfileRecordingMutex.Unlock()
	fake.GetProfileRecordingStub = nil
	fake.getProfileRecordingReturns = struct {
		result1 *v1alpha1.ProfileRecording
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) GetProfileRecordingReturnsOnCall(i int, result1 *v1alpha1.ProfileRecording, result2 error) {
	fake.getProfileRecordingMutex.Lock()
	defer fake.getProfileRecordingMutex.Unlock()
	fake.GetProfileRecordingStub = nil
	if fake.getProfileRecordingReturnsOnCall == nil {
		fake.getProfileRecordingReturnsOnCall = make(map[int]struct {
			result1 *v1alpha1.ProfileRecording
			result2 error
		})
	}
	fake.getProfileRecordingReturnsOnCall[i] = struct {
		result1 *v1alpha1.ProfileRecording
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) LabelSelectorAsSelector(arg1 *v1a.LabelSelector) (labels.Selector, error) {
	fake.labelSelectorAsSelectorMutex.Lock()
	ret, specificReturn := fake.labelSelectorAsSelectorReturnsOnCall[len(fake.labelSelectorAsSelectorArgsForCall)]
	fake.labelSelectorAsSelectorArgsForCall = append(fake.labelSelectorAsSelectorArgsForCall, struct {
		arg1 *v1a.LabelSelector
	}{arg1})
	stub := fake.LabelSelectorAsSelectorStub
	fakeReturns := fake.labelSelectorAsSelectorReturns
	fake.recordInvocation("LabelSelectorAsSelector", []interface{}{arg1})
	fake.labelSelectorAsSelectorMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeImpl) LabelSelectorAsSelectorCallCount() int {
	fake.labelSelectorAsSelectorMutex.RLock()
	defer fake.labelSelectorAsSelectorMutex.RUnlock()
	return len(fake.labelSelectorAsSelectorArgsForCall)
}

func (fake *FakeImpl) LabelSelectorAsSelectorCalls(stub func(*v1a.LabelSelector) (labels.Selector, error)) {
	fake.labelSelectorAsSelectorMutex.Lock()
	defer fake.labelSelectorAsSelectorMutex.Unlock()
	fake.LabelSelectorAsSelectorStub = stub
}

func (fake *FakeImpl) LabelSelectorAsSelectorArgsForCall(i int) *v1a.LabelSelector {
	fake.labelSelectorAsSelectorMutex.RLock()
	defer fake.labelSelectorAsSelectorMutex.RUnlock()
	argsForCall := fake.labelSelectorAsSelectorArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeImpl) LabelSelectorAsSelectorReturns(result1 labels.Selector, result2 error) {
	fake.labelSelectorAsSelectorMutex.Lock()
	defer fake.labelSelectorAsSelectorMutex.Unlock()
	fake.LabelSelectorAsSelectorStub = nil
	fake.labelSelectorAsSelectorReturns = struct {
		result1 labels.Selector
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) LabelSelectorAsSelectorReturnsOnCall(i int, result1 labels.Selector, result2 error) {
	fake.labelSelectorAsSelectorMutex.Lock()
	defer fake.labelSelectorAsSelectorMutex.Unlock()
	fake.LabelSelectorAsSelectorStub = nil
	if fake.labelSelectorAsSelectorReturnsOnCall == nil {
		fake.labelSelectorAsSelectorReturnsOnCall = make(map[int]struct {
			result1 labels.Selector
			result2 error
		})
	}
	fake.labelSelectorAsSelectorReturnsOnCall[i] = struct {
		result1 labels.Selector
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) ListProfileRecordings(arg1 context.Context, arg2 ...client.ListOption) (*v1alpha1.ProfileRecordingList, error) {
	fake.listProfileRecordingsMutex.Lock()
	ret, specificReturn := fake.listProfileRecordingsReturnsOnCall[len(fake.listProfileRecordingsArgsForCall)]
	fake.listProfileRecordingsArgsForCall = append(fake.listProfileRecordingsArgsForCall, struct {
		arg1 context.Context
		arg2 []client.ListOption
	}{arg1, arg2})
	stub := fake.ListProfileRecordingsStub
	fakeReturns := fake.listProfileRecordingsReturns
	fake.recordInvocation("ListProfileRecordings", []interface{}{arg1, arg2})
	fake.listProfileRecordingsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeImpl) ListProfileRecordingsCallCount() int {
	fake.listProfileRecordingsMutex.RLock()
	defer fake.listProfileRecordingsMutex.RUnlock()
	return len(fake.listProfileRecordingsArgsForCall)
}

func (fake *FakeImpl) ListProfileRecordingsCalls(stub func(context.Context, ...client.ListOption) (*v1alpha1.ProfileRecordingList, error)) {
	fake.listProfileRecordingsMutex.Lock()
	defer fake.listProfileRecordingsMutex.Unlock()
	fake.ListProfileRecordingsStub = stub
}

func (fake *FakeImpl) ListProfileRecordingsArgsForCall(i int) (context.Context, []client.ListOption) {
	fake.listProfileRecordingsMutex.RLock()
	defer fake.listProfileRecordingsMutex.RUnlock()
	argsForCall := fake.listProfileRecordingsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeImpl) ListProfileRecordingsReturns(result1 *v1alpha1.ProfileRecordingList, result2 error) {
	fake.listProfileRecordingsMutex.Lock()
	defer fake.listProfileRecordingsMutex.Unlock()
	fake.ListProfileRecordingsStub = nil
	fake.listProfileRecordingsReturns = struct {
		result1 *v1alpha1.ProfileRecordingList
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) ListProfileRecordingsReturnsOnCall(i int, result1 *v1alpha1.ProfileRecordingList, result2 error) {
	fake.listProfileRecordingsMutex.Lock()
	defer fake.listProfileRecordingsMutex.Unlock()
	fake.ListProfileRecordingsStub = nil
	if fake.listProfileRecordingsReturnsOnCall == nil {
		fake.listProfileRecordingsReturnsOnCall = make(map[int]struct {
			result1 *v1alpha1.ProfileRecordingList
			result2 error
		})
	}
	fake.listProfileRecordingsReturnsOnCall[i] = struct {
		result1 *v1alpha1.ProfileRecordingList
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) ListRecordedPods(arg1 context.Context, arg2 string, arg3 *v1a.LabelSelector) (*v1.PodList, error) {
	fake.listRecordedPodsMutex.Lock()
	ret, specificReturn := fake.listRecordedPodsReturnsOnCall[len(fake.listRecordedPodsArgsForCall)]
	fake.listRecordedPodsArgsForCall = append(fake.listRecordedPodsArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *v1a.LabelSelector
	}{arg1, arg2, arg3})
	stub := fake.ListRecordedPodsStub
	fakeReturns := fake.listRecordedPodsReturns
	fake.recordInvocation("ListRecordedPods", []interface{}{arg1, arg2, arg3})
	fake.listRecordedPodsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeImpl) ListRecordedPodsCallCount() int {
	fake.listRecordedPodsMutex.RLock()
	defer fake.listRecordedPodsMutex.RUnlock()
	return len(fake.listRecordedPodsArgsForCall)
}

func (fake *FakeImpl) ListRecordedPodsCalls(stub func(context.Context, string, *v1a.LabelSelector) (*v1.PodList, error)) {
	fake.listRecordedPodsMutex.Lock()
	defer fake.listRecordedPodsMutex.Unlock()
	fake.ListRecordedPodsStub = stub
}

func (fake *FakeImpl) ListRecordedPodsArgsForCall(i int) (context.Context, string, *v1a.LabelSelector) {
	fake.listRecordedPodsMutex.RLock()
	defer fake.listRecordedPodsMutex.RUnlock()
	argsForCall := fake.listRecordedPodsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeImpl) ListRecordedPodsReturns(result1 *v1.PodList, result2 error) {
	fake.listRecordedPodsMutex.Lock()
	defer fake.listRecordedPodsMutex.Unlock()
	fake.ListRecordedPodsStub = nil
	fake.listRecordedPodsReturns = struct {
		result1 *v1.PodList
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) ListRecordedPodsReturnsOnCall(i int, result1 *v1.PodList, result2 error) {
	fake.listRecordedPodsMutex.Lock()
	defer fake.listRecordedPodsMutex.Unlock()
	fake.ListRecordedPodsStub = nil
	if fake.listRecordedPodsReturnsOnCall == nil {
		fake.listRecordedPodsReturnsOnCall = make(map[int]struct {
			result1 *v1.PodList
			result2 error
		})
	}
	fake.listRecordedPodsReturnsOnCall[i] = struct {
		result1 *v1.PodList
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) UpdateResource(arg1 context.Context, arg2 logr.Logger, arg3 client.Object, arg4 string) error {
	fake.updateResourceMutex.Lock()
	ret, specificReturn := fake.updateResourceReturnsOnCall[len(fake.updateResourceArgsForCall)]
	fake.updateResourceArgsForCall = append(fake.updateResourceArgsForCall, struct {
		arg1 context.Context
		arg2 logr.Logger
		arg3 client.Object
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.UpdateResourceStub
	fakeReturns := fake.updateResourceReturns
	fake.recordInvocation("UpdateResource", []interface{}{arg1, arg2, arg3, arg4})
	fake.updateResourceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeImpl) UpdateResourceCallCount() int {
	fake.updateResourceMutex.RLock()
	defer fake.updateResourceMutex.RUnlock()
	return len(fake.updateResourceArgsForCall)
}

func (fake *FakeImpl) UpdateResourceCalls(stub func(context.Context, logr.Logger, client.Object, string) error) {
	fake.updateResourceMutex.Lock()
	defer fake.updateResourceMutex.Unlock()
	fake.UpdateResourceStub = stub
}

func (fake *FakeImpl) UpdateResourceArgsForCall(i int) (context.Context, logr.Logger, client.Object, string) {
	fake.updateResourceMutex.RLock()
	defer fake.updateResourceMutex.RUnlock()
	argsForCall := fake.updateResourceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeImpl) UpdateResourceReturns(result1 error) {
	fake.updateResourceMutex.Lock()
	defer fake.updateResourceMutex.Unlock()
	fake.UpdateResourceStub = nil
	fake.updateResourceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeImpl) UpdateResourceReturnsOnCall(i int, result1 error) {
	fake.updateResourceMutex.Lock()
	defer fake.updateResourceMutex.Unlock()
	fake.UpdateResourceStub = nil
	if fake.updateResourceReturnsOnCall == nil {
		fake.updateResourceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateResourceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeImpl) UpdateResourceStatus(arg1 context.Context, arg2 logr.Logger, arg3 client.Object, arg4 string) error {
	fake.updateResourceStatusMutex.Lock()
	ret, specificReturn := fake.updateResourceStatusReturnsOnCall[len(fake.updateResourceStatusArgsForCall)]
	fake.updateResourceStatusArgsForCall = append(fake.updateResourceStatusArgsForCall, struct {
		arg1 context.Context
		arg2 logr.Logger
		arg3 client.Object
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.UpdateResourceStatusStub
	fakeReturns := fake.updateResourceStatusReturns
	fake.recordInvocation("UpdateResourceStatus", []interface{}{arg1, arg2, arg3, arg4})
	fake.updateResourceStatusMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeImpl) UpdateResourceStatusCallCount() int {
	fake.updateResourceStatusMutex.RLock()
	defer fake.updateResourceStatusMutex.RUnlock()
	return len(fake.updateResourceStatusArgsForCall)
}

func (fake *FakeImpl) UpdateResourceStatusCalls(stub func(context.Context, logr.Logger, client.Object, string) error) {
	fake.updateResourceStatusMutex.Lock()
	defer fake.updateResourceStatusMutex.Unlock()
	fake.UpdateResourceStatusStub = stub
}

func (fake *FakeImpl) UpdateResourceStatusArgsForCall(i int) (context.Context, logr.Logger, client.Object, string) {
	fake.updateResourceStatusMutex.RLock()
	defer fake.updateResourceStatusMutex.RUnlock()
	argsForCall := fake.updateResourceStatusArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeImpl) UpdateResourceStatusReturns(result1 error) {
	fake.updateResourceStatusMutex.Lock()
	defer fake.updateResourceStatusMutex.Unlock()
	fake.UpdateResourceStatusStub = nil
	fake.updateResourceStatusReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeImpl) UpdateResourceStatusReturnsOnCall(i int, result1 error) {
	fake.updateResourceStatusMutex.Lock()
	defer fake.updateResourceStatusMutex.Unlock()
	fake.UpdateResourceStatusStub = nil
	if fake.updateResourceStatusReturnsOnCall == nil {
		fake.updateResourceStatusReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateResourceStatusReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeImpl) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.decodePodMutex.RLock()
	defer fake.decodePodMutex.RUnlock()
	fake.getOperatorNamespaceMutex.RLock()
	defer fake.getOperatorNamespaceMutex.RUnlock()
	fake.getProfileRecordingMutex.RLock()
	defer fake.getProfileRecordingMutex.RUnlock()
	fake.labelSelectorAsSelectorMutex.RLock()
	defer fake.labelSelectorAsSelectorMutex.RUnlock()
	fake.listProfileRecordingsMutex.RLock()
	defer fake.listProfileRecordingsMutex.RUnlock()
	fake.listRecordedPodsMutex.RLock()
	defer fake.listRecordedPodsMutex.RUnlock()
	fake.updateResourceMutex.RLock()
	defer fake.updateResourceMutex.RUnlock()
	fake.updateResourceStatusMutex.RLock()
	defer fake.updateResourceStatusMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeImpl) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
