/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by counterfeiter. DO NOT EDIT.
package removerfakes

import (
	"sync"

	"sigs.k8s.io/security-profiles-operator/api/profilebase/v1alpha1"
	"sigs.k8s.io/security-profiles-operator/internal/pkg/daemon/apparmorprofile"
)

type FakeImpl struct {
	AppArmorEnabledStub        func(apparmorprofile.ProfileManager) bool
	appArmorEnabledMutex       sync.RWMutex
	appArmorEnabledArgsForCall []struct {
		arg1 apparmorprofile.ProfileManager
	}
	appArmorEnabledReturns struct {
		result1 bool
	}
	appArmorEnabledReturnsOnCall map[int]struct {
		result1 bool
	}
	AppArmorRemoveProfileStub        func(apparmorprofile.ProfileManager, v1alpha1.StatusBaseUser) error
	appArmorRemoveProfileMutex       sync.RWMutex
	appArmorRemoveProfileArgsForCall []struct {
		arg1 apparmorprofile.ProfileManager
		arg2 v1alpha1.StatusBaseUser
	}
	appArmorRemoveProfileReturns struct {
		result1 error
	}
	appArmorRemoveProfileReturnsOnCall map[int]struct {
		result1 error
	}
	ReadFileStub        func(string) ([]byte, error)
	readFileMutex       sync.RWMutex
	readFileArgsForCall []struct {
		arg1 string
	}
	readFileReturns struct {
		result1 []byte
		result2 error
	}
	readFileReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeImpl) AppArmorEnabled(arg1 apparmorprofile.ProfileManager) bool {
	fake.appArmorEnabledMutex.Lock()
	ret, specificReturn := fake.appArmorEnabledReturnsOnCall[len(fake.appArmorEnabledArgsForCall)]
	fake.appArmorEnabledArgsForCall = append(fake.appArmorEnabledArgsForCall, struct {
		arg1 apparmorprofile.ProfileManager
	}{arg1})
	stub := fake.AppArmorEnabledStub
	fakeReturns := fake.appArmorEnabledReturns
	fake.recordInvocation("AppArmorEnabled", []interface{}{arg1})
	fake.appArmorEnabledMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeImpl) AppArmorEnabledCallCount() int {
	fake.appArmorEnabledMutex.RLock()
	defer fake.appArmorEnabledMutex.RUnlock()
	return len(fake.appArmorEnabledArgsForCall)
}

func (fake *FakeImpl) AppArmorEnabledCalls(stub func(apparmorprofile.ProfileManager) bool) {
	fake.appArmorEnabledMutex.Lock()
	defer fake.appArmorEnabledMutex.Unlock()
	fake.AppArmorEnabledStub = stub
}

func (fake *FakeImpl) AppArmorEnabledArgsForCall(i int) apparmorprofile.ProfileManager {
	fake.appArmorEnabledMutex.RLock()
	defer fake.appArmorEnabledMutex.RUnlock()
	argsForCall := fake.appArmorEnabledArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeImpl) AppArmorEnabledReturns(result1 bool) {
	fake.appArmorEnabledMutex.Lock()
	defer fake.appArmorEnabledMutex.Unlock()
	fake.AppArmorEnabledStub = nil
	fake.appArmorEnabledReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeImpl) AppArmorEnabledReturnsOnCall(i int, result1 bool) {
	fake.appArmorEnabledMutex.Lock()
	defer fake.appArmorEnabledMutex.Unlock()
	fake.AppArmorEnabledStub = nil
	if fake.appArmorEnabledReturnsOnCall == nil {
		fake.appArmorEnabledReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.appArmorEnabledReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeImpl) AppArmorRemoveProfile(arg1 apparmorprofile.ProfileManager, arg2 v1alpha1.StatusBaseUser) error {
	fake.appArmorRemoveProfileMutex.Lock()
	ret, specificReturn := fake.appArmorRemoveProfileReturnsOnCall[len(fake.appArmorRemoveProfileArgsForCall)]
	fake.appArmorRemoveProfileArgsForCall = append(fake.appArmorRemoveProfileArgsForCall, struct {
		arg1 apparmorprofile.ProfileManager
		arg2 v1alpha1.StatusBaseUser
	}{arg1, arg2})
	stub := fake.AppArmorRemoveProfileStub
	fakeReturns := fake.appArmorRemoveProfileReturns
	fake.recordInvocation("AppArmorRemoveProfile", []interface{}{arg1, arg2})
	fake.appArmorRemoveProfileMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeImpl) AppArmorRemoveProfileCallCount() int {
	fake.appArmorRemoveProfileMutex.RLock()
	defer fake.appArmorRemoveProfileMutex.RUnlock()
	return len(fake.appArmorRemoveProfileArgsForCall)
}

func (fake *FakeImpl) AppArmorRemoveProfileCalls(stub func(apparmorprofile.ProfileManager, v1alpha1.StatusBaseUser) error) {
	fake.appArmorRemoveProfileMutex.Lock()
	defer fake.appArmorRemoveProfileMutex.Unlock()
	fake.AppArmorRemoveProfileStub = stub
}

func (fake *FakeImpl) AppArmorRemoveProfileArgsForCall(i int) (apparmorprofile.ProfileManager, v1alpha1.StatusBaseUser) {
	fake.appArmorRemoveProfileMutex.RLock()
	defer fake.appArmorRemoveProfileMutex.RUnlock()
	argsForCall := fake.appArmorRemoveProfileArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeImpl) AppArmorRemoveProfileReturns(result1 error) {
	fake.appArmorRemoveProfileMutex.Lock()
	defer fake.appArmorRemoveProfileMutex.Unlock()
	fake.AppArmorRemoveProfileStub = nil
	fake.appArmorRemoveProfileReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeImpl) AppArmorRemoveProfileReturnsOnCall(i int, result1 error) {
	fake.appArmorRemoveProfileMutex.Lock()
	defer fake.appArmorRemoveProfileMutex.Unlock()
	fake.AppArmorRemoveProfileStub = nil
	if fake.appArmorRemoveProfileReturnsOnCall == nil {
		fake.appArmorRemoveProfileReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.appArmorRemoveProfileReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeImpl) ReadFile(arg1 string) ([]byte, error) {
	fake.readFileMutex.Lock()
	ret, specificReturn := fake.readFileReturnsOnCall[len(fake.readFileArgsForCall)]
	fake.readFileArgsForCall = append(fake.readFileArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ReadFileStub
	fakeReturns := fake.readFileReturns
	fake.recordInvocation("ReadFile", []interface{}{arg1})
	fake.readFileMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeImpl) ReadFileCallCount() int {
	fake.readFileMutex.RLock()
	defer fake.readFileMutex.RUnlock()
	return len(fake.readFileArgsForCall)
}

func (fake *FakeImpl) ReadFileCalls(stub func(string) ([]byte, error)) {
	fake.readFileMutex.Lock()
	defer fake.readFileMutex.Unlock()
	fake.ReadFileStub = stub
}

func (fake *FakeImpl) ReadFileArgsForCall(i int) string {
	fake.readFileMutex.RLock()
	defer fake.readFileMutex.RUnlock()
	argsForCall := fake.readFileArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeImpl) ReadFileReturns(result1 []byte, result2 error) {
	fake.readFileMutex.Lock()
	defer fake.readFileMutex.Unlock()
	fake.ReadFileStub = nil
	fake.readFileReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) ReadFileReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.readFileMutex.Lock()
	defer fake.readFileMutex.Unlock()
	fake.ReadFileStub = nil
	if fake.readFileReturnsOnCall == nil {
		fake.readFileReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.readFileReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeImpl) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
