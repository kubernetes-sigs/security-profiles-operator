/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by counterfeiter. DO NOT EDIT.
package artifactfakes

import (
	"context"
	"sync"

	"github.com/google/go-containerregistry/pkg/name"
	v1 "github.com/opencontainers/image-spec/specs-go/v1"
	"github.com/sigstore/cosign/v2/cmd/cosign/cli/options"
	"github.com/sigstore/cosign/v2/cmd/cosign/cli/verify"
	oras "oras.land/oras-go/v2"
	"oras.land/oras-go/v2/content"
	"oras.land/oras-go/v2/content/file"
	"oras.land/oras-go/v2/registry/remote"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

type FakeImpl struct {
	ClientSecretStub        func(options.OIDCOptions) (string, error)
	clientSecretMutex       sync.RWMutex
	clientSecretArgsForCall []struct {
		arg1 options.OIDCOptions
	}
	clientSecretReturns struct {
		result1 string
		result2 error
	}
	clientSecretReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	CopyStub        func(context.Context, oras.ReadOnlyTarget, string, oras.Target, string, oras.CopyOptions) (v1.Descriptor, error)
	copyMutex       sync.RWMutex
	copyArgsForCall []struct {
		arg1 context.Context
		arg2 oras.ReadOnlyTarget
		arg3 string
		arg4 oras.Target
		arg5 string
		arg6 oras.CopyOptions
	}
	copyReturns struct {
		result1 v1.Descriptor
		result2 error
	}
	copyReturnsOnCall map[int]struct {
		result1 v1.Descriptor
		result2 error
	}
	FileCloseStub        func(*file.Store) error
	fileCloseMutex       sync.RWMutex
	fileCloseArgsForCall []struct {
		arg1 *file.Store
	}
	fileCloseReturns struct {
		result1 error
	}
	fileCloseReturnsOnCall map[int]struct {
		result1 error
	}
	FileNewStub        func(string) (*file.Store, error)
	fileNewMutex       sync.RWMutex
	fileNewArgsForCall []struct {
		arg1 string
	}
	fileNewReturns struct {
		result1 *file.Store
		result2 error
	}
	fileNewReturnsOnCall map[int]struct {
		result1 *file.Store
		result2 error
	}
	FilepathAbsStub        func(string) (string, error)
	filepathAbsMutex       sync.RWMutex
	filepathAbsArgsForCall []struct {
		arg1 string
	}
	filepathAbsReturns struct {
		result1 string
		result2 error
	}
	filepathAbsReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	MkdirTempStub        func(string, string) (string, error)
	mkdirTempMutex       sync.RWMutex
	mkdirTempArgsForCall []struct {
		arg1 string
		arg2 string
	}
	mkdirTempReturns struct {
		result1 string
		result2 error
	}
	mkdirTempReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	NewRepositoryStub        func(string) (*remote.Repository, error)
	newRepositoryMutex       sync.RWMutex
	newRepositoryArgsForCall []struct {
		arg1 string
	}
	newRepositoryReturns struct {
		result1 *remote.Repository
		result2 error
	}
	newRepositoryReturnsOnCall map[int]struct {
		result1 *remote.Repository
		result2 error
	}
	PackManifestStub        func(context.Context, content.Pusher, oras.PackManifestVersion, string, oras.PackManifestOptions) (v1.Descriptor, error)
	packManifestMutex       sync.RWMutex
	packManifestArgsForCall []struct {
		arg1 context.Context
		arg2 content.Pusher
		arg3 oras.PackManifestVersion
		arg4 string
		arg5 oras.PackManifestOptions
	}
	packManifestReturns struct {
		result1 v1.Descriptor
		result2 error
	}
	packManifestReturnsOnCall map[int]struct {
		result1 v1.Descriptor
		result2 error
	}
	ParseReferenceStub        func(string, ...name.Option) (name.Reference, error)
	parseReferenceMutex       sync.RWMutex
	parseReferenceArgsForCall []struct {
		arg1 string
		arg2 []name.Option
	}
	parseReferenceReturns struct {
		result1 name.Reference
		result2 error
	}
	parseReferenceReturnsOnCall map[int]struct {
		result1 name.Reference
		result2 error
	}
	ReadFileStub        func(string) ([]byte, error)
	readFileMutex       sync.RWMutex
	readFileArgsForCall []struct {
		arg1 string
	}
	readFileReturns struct {
		result1 []byte
		result2 error
	}
	readFileReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	ReadProfileStub        func([]byte) (client.Object, error)
	readProfileMutex       sync.RWMutex
	readProfileArgsForCall []struct {
		arg1 []byte
	}
	readProfileReturns struct {
		result1 client.Object
		result2 error
	}
	readProfileReturnsOnCall map[int]struct {
		result1 client.Object
		result2 error
	}
	RemoveAllStub        func(string) error
	removeAllMutex       sync.RWMutex
	removeAllArgsForCall []struct {
		arg1 string
	}
	removeAllReturns struct {
		result1 error
	}
	removeAllReturnsOnCall map[int]struct {
		result1 error
	}
	SignCmdStub        func(*options.RootOptions, options.KeyOpts, options.SignOptions, []string) error
	signCmdMutex       sync.RWMutex
	signCmdArgsForCall []struct {
		arg1 *options.RootOptions
		arg2 options.KeyOpts
		arg3 options.SignOptions
		arg4 []string
	}
	signCmdReturns struct {
		result1 error
	}
	signCmdReturnsOnCall map[int]struct {
		result1 error
	}
	StoreAddStub        func(context.Context, *file.Store, string, string, string) (v1.Descriptor, error)
	storeAddMutex       sync.RWMutex
	storeAddArgsForCall []struct {
		arg1 context.Context
		arg2 *file.Store
		arg3 string
		arg4 string
		arg5 string
	}
	storeAddReturns struct {
		result1 v1.Descriptor
		result2 error
	}
	storeAddReturnsOnCall map[int]struct {
		result1 v1.Descriptor
		result2 error
	}
	StoreTagStub        func(context.Context, *file.Store, v1.Descriptor, string) error
	storeTagMutex       sync.RWMutex
	storeTagArgsForCall []struct {
		arg1 context.Context
		arg2 *file.Store
		arg3 v1.Descriptor
		arg4 string
	}
	storeTagReturns struct {
		result1 error
	}
	storeTagReturnsOnCall map[int]struct {
		result1 error
	}
	VerifyCmdStub        func(context.Context, verify.VerifyCommand, string) error
	verifyCmdMutex       sync.RWMutex
	verifyCmdArgsForCall []struct {
		arg1 context.Context
		arg2 verify.VerifyCommand
		arg3 string
	}
	verifyCmdReturns struct {
		result1 error
	}
	verifyCmdReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeImpl) ClientSecret(arg1 options.OIDCOptions) (string, error) {
	fake.clientSecretMutex.Lock()
	ret, specificReturn := fake.clientSecretReturnsOnCall[len(fake.clientSecretArgsForCall)]
	fake.clientSecretArgsForCall = append(fake.clientSecretArgsForCall, struct {
		arg1 options.OIDCOptions
	}{arg1})
	stub := fake.ClientSecretStub
	fakeReturns := fake.clientSecretReturns
	fake.recordInvocation("ClientSecret", []interface{}{arg1})
	fake.clientSecretMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeImpl) ClientSecretCallCount() int {
	fake.clientSecretMutex.RLock()
	defer fake.clientSecretMutex.RUnlock()
	return len(fake.clientSecretArgsForCall)
}

func (fake *FakeImpl) ClientSecretCalls(stub func(options.OIDCOptions) (string, error)) {
	fake.clientSecretMutex.Lock()
	defer fake.clientSecretMutex.Unlock()
	fake.ClientSecretStub = stub
}

func (fake *FakeImpl) ClientSecretArgsForCall(i int) options.OIDCOptions {
	fake.clientSecretMutex.RLock()
	defer fake.clientSecretMutex.RUnlock()
	argsForCall := fake.clientSecretArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeImpl) ClientSecretReturns(result1 string, result2 error) {
	fake.clientSecretMutex.Lock()
	defer fake.clientSecretMutex.Unlock()
	fake.ClientSecretStub = nil
	fake.clientSecretReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) ClientSecretReturnsOnCall(i int, result1 string, result2 error) {
	fake.clientSecretMutex.Lock()
	defer fake.clientSecretMutex.Unlock()
	fake.ClientSecretStub = nil
	if fake.clientSecretReturnsOnCall == nil {
		fake.clientSecretReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.clientSecretReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) Copy(arg1 context.Context, arg2 oras.ReadOnlyTarget, arg3 string, arg4 oras.Target, arg5 string, arg6 oras.CopyOptions) (v1.Descriptor, error) {
	fake.copyMutex.Lock()
	ret, specificReturn := fake.copyReturnsOnCall[len(fake.copyArgsForCall)]
	fake.copyArgsForCall = append(fake.copyArgsForCall, struct {
		arg1 context.Context
		arg2 oras.ReadOnlyTarget
		arg3 string
		arg4 oras.Target
		arg5 string
		arg6 oras.CopyOptions
	}{arg1, arg2, arg3, arg4, arg5, arg6})
	stub := fake.CopyStub
	fakeReturns := fake.copyReturns
	fake.recordInvocation("Copy", []interface{}{arg1, arg2, arg3, arg4, arg5, arg6})
	fake.copyMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5, arg6)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeImpl) CopyCallCount() int {
	fake.copyMutex.RLock()
	defer fake.copyMutex.RUnlock()
	return len(fake.copyArgsForCall)
}

func (fake *FakeImpl) CopyCalls(stub func(context.Context, oras.ReadOnlyTarget, string, oras.Target, string, oras.CopyOptions) (v1.Descriptor, error)) {
	fake.copyMutex.Lock()
	defer fake.copyMutex.Unlock()
	fake.CopyStub = stub
}

func (fake *FakeImpl) CopyArgsForCall(i int) (context.Context, oras.ReadOnlyTarget, string, oras.Target, string, oras.CopyOptions) {
	fake.copyMutex.RLock()
	defer fake.copyMutex.RUnlock()
	argsForCall := fake.copyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6
}

func (fake *FakeImpl) CopyReturns(result1 v1.Descriptor, result2 error) {
	fake.copyMutex.Lock()
	defer fake.copyMutex.Unlock()
	fake.CopyStub = nil
	fake.copyReturns = struct {
		result1 v1.Descriptor
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) CopyReturnsOnCall(i int, result1 v1.Descriptor, result2 error) {
	fake.copyMutex.Lock()
	defer fake.copyMutex.Unlock()
	fake.CopyStub = nil
	if fake.copyReturnsOnCall == nil {
		fake.copyReturnsOnCall = make(map[int]struct {
			result1 v1.Descriptor
			result2 error
		})
	}
	fake.copyReturnsOnCall[i] = struct {
		result1 v1.Descriptor
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) FileClose(arg1 *file.Store) error {
	fake.fileCloseMutex.Lock()
	ret, specificReturn := fake.fileCloseReturnsOnCall[len(fake.fileCloseArgsForCall)]
	fake.fileCloseArgsForCall = append(fake.fileCloseArgsForCall, struct {
		arg1 *file.Store
	}{arg1})
	stub := fake.FileCloseStub
	fakeReturns := fake.fileCloseReturns
	fake.recordInvocation("FileClose", []interface{}{arg1})
	fake.fileCloseMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeImpl) FileCloseCallCount() int {
	fake.fileCloseMutex.RLock()
	defer fake.fileCloseMutex.RUnlock()
	return len(fake.fileCloseArgsForCall)
}

func (fake *FakeImpl) FileCloseCalls(stub func(*file.Store) error) {
	fake.fileCloseMutex.Lock()
	defer fake.fileCloseMutex.Unlock()
	fake.FileCloseStub = stub
}

func (fake *FakeImpl) FileCloseArgsForCall(i int) *file.Store {
	fake.fileCloseMutex.RLock()
	defer fake.fileCloseMutex.RUnlock()
	argsForCall := fake.fileCloseArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeImpl) FileCloseReturns(result1 error) {
	fake.fileCloseMutex.Lock()
	defer fake.fileCloseMutex.Unlock()
	fake.FileCloseStub = nil
	fake.fileCloseReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeImpl) FileCloseReturnsOnCall(i int, result1 error) {
	fake.fileCloseMutex.Lock()
	defer fake.fileCloseMutex.Unlock()
	fake.FileCloseStub = nil
	if fake.fileCloseReturnsOnCall == nil {
		fake.fileCloseReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.fileCloseReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeImpl) FileNew(arg1 string) (*file.Store, error) {
	fake.fileNewMutex.Lock()
	ret, specificReturn := fake.fileNewReturnsOnCall[len(fake.fileNewArgsForCall)]
	fake.fileNewArgsForCall = append(fake.fileNewArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.FileNewStub
	fakeReturns := fake.fileNewReturns
	fake.recordInvocation("FileNew", []interface{}{arg1})
	fake.fileNewMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeImpl) FileNewCallCount() int {
	fake.fileNewMutex.RLock()
	defer fake.fileNewMutex.RUnlock()
	return len(fake.fileNewArgsForCall)
}

func (fake *FakeImpl) FileNewCalls(stub func(string) (*file.Store, error)) {
	fake.fileNewMutex.Lock()
	defer fake.fileNewMutex.Unlock()
	fake.FileNewStub = stub
}

func (fake *FakeImpl) FileNewArgsForCall(i int) string {
	fake.fileNewMutex.RLock()
	defer fake.fileNewMutex.RUnlock()
	argsForCall := fake.fileNewArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeImpl) FileNewReturns(result1 *file.Store, result2 error) {
	fake.fileNewMutex.Lock()
	defer fake.fileNewMutex.Unlock()
	fake.FileNewStub = nil
	fake.fileNewReturns = struct {
		result1 *file.Store
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) FileNewReturnsOnCall(i int, result1 *file.Store, result2 error) {
	fake.fileNewMutex.Lock()
	defer fake.fileNewMutex.Unlock()
	fake.FileNewStub = nil
	if fake.fileNewReturnsOnCall == nil {
		fake.fileNewReturnsOnCall = make(map[int]struct {
			result1 *file.Store
			result2 error
		})
	}
	fake.fileNewReturnsOnCall[i] = struct {
		result1 *file.Store
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) FilepathAbs(arg1 string) (string, error) {
	fake.filepathAbsMutex.Lock()
	ret, specificReturn := fake.filepathAbsReturnsOnCall[len(fake.filepathAbsArgsForCall)]
	fake.filepathAbsArgsForCall = append(fake.filepathAbsArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.FilepathAbsStub
	fakeReturns := fake.filepathAbsReturns
	fake.recordInvocation("FilepathAbs", []interface{}{arg1})
	fake.filepathAbsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeImpl) FilepathAbsCallCount() int {
	fake.filepathAbsMutex.RLock()
	defer fake.filepathAbsMutex.RUnlock()
	return len(fake.filepathAbsArgsForCall)
}

func (fake *FakeImpl) FilepathAbsCalls(stub func(string) (string, error)) {
	fake.filepathAbsMutex.Lock()
	defer fake.filepathAbsMutex.Unlock()
	fake.FilepathAbsStub = stub
}

func (fake *FakeImpl) FilepathAbsArgsForCall(i int) string {
	fake.filepathAbsMutex.RLock()
	defer fake.filepathAbsMutex.RUnlock()
	argsForCall := fake.filepathAbsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeImpl) FilepathAbsReturns(result1 string, result2 error) {
	fake.filepathAbsMutex.Lock()
	defer fake.filepathAbsMutex.Unlock()
	fake.FilepathAbsStub = nil
	fake.filepathAbsReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) FilepathAbsReturnsOnCall(i int, result1 string, result2 error) {
	fake.filepathAbsMutex.Lock()
	defer fake.filepathAbsMutex.Unlock()
	fake.FilepathAbsStub = nil
	if fake.filepathAbsReturnsOnCall == nil {
		fake.filepathAbsReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.filepathAbsReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) MkdirTemp(arg1 string, arg2 string) (string, error) {
	fake.mkdirTempMutex.Lock()
	ret, specificReturn := fake.mkdirTempReturnsOnCall[len(fake.mkdirTempArgsForCall)]
	fake.mkdirTempArgsForCall = append(fake.mkdirTempArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.MkdirTempStub
	fakeReturns := fake.mkdirTempReturns
	fake.recordInvocation("MkdirTemp", []interface{}{arg1, arg2})
	fake.mkdirTempMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeImpl) MkdirTempCallCount() int {
	fake.mkdirTempMutex.RLock()
	defer fake.mkdirTempMutex.RUnlock()
	return len(fake.mkdirTempArgsForCall)
}

func (fake *FakeImpl) MkdirTempCalls(stub func(string, string) (string, error)) {
	fake.mkdirTempMutex.Lock()
	defer fake.mkdirTempMutex.Unlock()
	fake.MkdirTempStub = stub
}

func (fake *FakeImpl) MkdirTempArgsForCall(i int) (string, string) {
	fake.mkdirTempMutex.RLock()
	defer fake.mkdirTempMutex.RUnlock()
	argsForCall := fake.mkdirTempArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeImpl) MkdirTempReturns(result1 string, result2 error) {
	fake.mkdirTempMutex.Lock()
	defer fake.mkdirTempMutex.Unlock()
	fake.MkdirTempStub = nil
	fake.mkdirTempReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) MkdirTempReturnsOnCall(i int, result1 string, result2 error) {
	fake.mkdirTempMutex.Lock()
	defer fake.mkdirTempMutex.Unlock()
	fake.MkdirTempStub = nil
	if fake.mkdirTempReturnsOnCall == nil {
		fake.mkdirTempReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.mkdirTempReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) NewRepository(arg1 string) (*remote.Repository, error) {
	fake.newRepositoryMutex.Lock()
	ret, specificReturn := fake.newRepositoryReturnsOnCall[len(fake.newRepositoryArgsForCall)]
	fake.newRepositoryArgsForCall = append(fake.newRepositoryArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.NewRepositoryStub
	fakeReturns := fake.newRepositoryReturns
	fake.recordInvocation("NewRepository", []interface{}{arg1})
	fake.newRepositoryMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeImpl) NewRepositoryCallCount() int {
	fake.newRepositoryMutex.RLock()
	defer fake.newRepositoryMutex.RUnlock()
	return len(fake.newRepositoryArgsForCall)
}

func (fake *FakeImpl) NewRepositoryCalls(stub func(string) (*remote.Repository, error)) {
	fake.newRepositoryMutex.Lock()
	defer fake.newRepositoryMutex.Unlock()
	fake.NewRepositoryStub = stub
}

func (fake *FakeImpl) NewRepositoryArgsForCall(i int) string {
	fake.newRepositoryMutex.RLock()
	defer fake.newRepositoryMutex.RUnlock()
	argsForCall := fake.newRepositoryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeImpl) NewRepositoryReturns(result1 *remote.Repository, result2 error) {
	fake.newRepositoryMutex.Lock()
	defer fake.newRepositoryMutex.Unlock()
	fake.NewRepositoryStub = nil
	fake.newRepositoryReturns = struct {
		result1 *remote.Repository
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) NewRepositoryReturnsOnCall(i int, result1 *remote.Repository, result2 error) {
	fake.newRepositoryMutex.Lock()
	defer fake.newRepositoryMutex.Unlock()
	fake.NewRepositoryStub = nil
	if fake.newRepositoryReturnsOnCall == nil {
		fake.newRepositoryReturnsOnCall = make(map[int]struct {
			result1 *remote.Repository
			result2 error
		})
	}
	fake.newRepositoryReturnsOnCall[i] = struct {
		result1 *remote.Repository
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) PackManifest(arg1 context.Context, arg2 content.Pusher, arg3 oras.PackManifestVersion, arg4 string, arg5 oras.PackManifestOptions) (v1.Descriptor, error) {
	fake.packManifestMutex.Lock()
	ret, specificReturn := fake.packManifestReturnsOnCall[len(fake.packManifestArgsForCall)]
	fake.packManifestArgsForCall = append(fake.packManifestArgsForCall, struct {
		arg1 context.Context
		arg2 content.Pusher
		arg3 oras.PackManifestVersion
		arg4 string
		arg5 oras.PackManifestOptions
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.PackManifestStub
	fakeReturns := fake.packManifestReturns
	fake.recordInvocation("PackManifest", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.packManifestMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeImpl) PackManifestCallCount() int {
	fake.packManifestMutex.RLock()
	defer fake.packManifestMutex.RUnlock()
	return len(fake.packManifestArgsForCall)
}

func (fake *FakeImpl) PackManifestCalls(stub func(context.Context, content.Pusher, oras.PackManifestVersion, string, oras.PackManifestOptions) (v1.Descriptor, error)) {
	fake.packManifestMutex.Lock()
	defer fake.packManifestMutex.Unlock()
	fake.PackManifestStub = stub
}

func (fake *FakeImpl) PackManifestArgsForCall(i int) (context.Context, content.Pusher, oras.PackManifestVersion, string, oras.PackManifestOptions) {
	fake.packManifestMutex.RLock()
	defer fake.packManifestMutex.RUnlock()
	argsForCall := fake.packManifestArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeImpl) PackManifestReturns(result1 v1.Descriptor, result2 error) {
	fake.packManifestMutex.Lock()
	defer fake.packManifestMutex.Unlock()
	fake.PackManifestStub = nil
	fake.packManifestReturns = struct {
		result1 v1.Descriptor
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) PackManifestReturnsOnCall(i int, result1 v1.Descriptor, result2 error) {
	fake.packManifestMutex.Lock()
	defer fake.packManifestMutex.Unlock()
	fake.PackManifestStub = nil
	if fake.packManifestReturnsOnCall == nil {
		fake.packManifestReturnsOnCall = make(map[int]struct {
			result1 v1.Descriptor
			result2 error
		})
	}
	fake.packManifestReturnsOnCall[i] = struct {
		result1 v1.Descriptor
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) ParseReference(arg1 string, arg2 ...name.Option) (name.Reference, error) {
	fake.parseReferenceMutex.Lock()
	ret, specificReturn := fake.parseReferenceReturnsOnCall[len(fake.parseReferenceArgsForCall)]
	fake.parseReferenceArgsForCall = append(fake.parseReferenceArgsForCall, struct {
		arg1 string
		arg2 []name.Option
	}{arg1, arg2})
	stub := fake.ParseReferenceStub
	fakeReturns := fake.parseReferenceReturns
	fake.recordInvocation("ParseReference", []interface{}{arg1, arg2})
	fake.parseReferenceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeImpl) ParseReferenceCallCount() int {
	fake.parseReferenceMutex.RLock()
	defer fake.parseReferenceMutex.RUnlock()
	return len(fake.parseReferenceArgsForCall)
}

func (fake *FakeImpl) ParseReferenceCalls(stub func(string, ...name.Option) (name.Reference, error)) {
	fake.parseReferenceMutex.Lock()
	defer fake.parseReferenceMutex.Unlock()
	fake.ParseReferenceStub = stub
}

func (fake *FakeImpl) ParseReferenceArgsForCall(i int) (string, []name.Option) {
	fake.parseReferenceMutex.RLock()
	defer fake.parseReferenceMutex.RUnlock()
	argsForCall := fake.parseReferenceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeImpl) ParseReferenceReturns(result1 name.Reference, result2 error) {
	fake.parseReferenceMutex.Lock()
	defer fake.parseReferenceMutex.Unlock()
	fake.ParseReferenceStub = nil
	fake.parseReferenceReturns = struct {
		result1 name.Reference
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) ParseReferenceReturnsOnCall(i int, result1 name.Reference, result2 error) {
	fake.parseReferenceMutex.Lock()
	defer fake.parseReferenceMutex.Unlock()
	fake.ParseReferenceStub = nil
	if fake.parseReferenceReturnsOnCall == nil {
		fake.parseReferenceReturnsOnCall = make(map[int]struct {
			result1 name.Reference
			result2 error
		})
	}
	fake.parseReferenceReturnsOnCall[i] = struct {
		result1 name.Reference
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) ReadFile(arg1 string) ([]byte, error) {
	fake.readFileMutex.Lock()
	ret, specificReturn := fake.readFileReturnsOnCall[len(fake.readFileArgsForCall)]
	fake.readFileArgsForCall = append(fake.readFileArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ReadFileStub
	fakeReturns := fake.readFileReturns
	fake.recordInvocation("ReadFile", []interface{}{arg1})
	fake.readFileMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeImpl) ReadFileCallCount() int {
	fake.readFileMutex.RLock()
	defer fake.readFileMutex.RUnlock()
	return len(fake.readFileArgsForCall)
}

func (fake *FakeImpl) ReadFileCalls(stub func(string) ([]byte, error)) {
	fake.readFileMutex.Lock()
	defer fake.readFileMutex.Unlock()
	fake.ReadFileStub = stub
}

func (fake *FakeImpl) ReadFileArgsForCall(i int) string {
	fake.readFileMutex.RLock()
	defer fake.readFileMutex.RUnlock()
	argsForCall := fake.readFileArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeImpl) ReadFileReturns(result1 []byte, result2 error) {
	fake.readFileMutex.Lock()
	defer fake.readFileMutex.Unlock()
	fake.ReadFileStub = nil
	fake.readFileReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) ReadFileReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.readFileMutex.Lock()
	defer fake.readFileMutex.Unlock()
	fake.ReadFileStub = nil
	if fake.readFileReturnsOnCall == nil {
		fake.readFileReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.readFileReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) ReadProfile(arg1 []byte) (client.Object, error) {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.readProfileMutex.Lock()
	ret, specificReturn := fake.readProfileReturnsOnCall[len(fake.readProfileArgsForCall)]
	fake.readProfileArgsForCall = append(fake.readProfileArgsForCall, struct {
		arg1 []byte
	}{arg1Copy})
	stub := fake.ReadProfileStub
	fakeReturns := fake.readProfileReturns
	fake.recordInvocation("ReadProfile", []interface{}{arg1Copy})
	fake.readProfileMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeImpl) ReadProfileCallCount() int {
	fake.readProfileMutex.RLock()
	defer fake.readProfileMutex.RUnlock()
	return len(fake.readProfileArgsForCall)
}

func (fake *FakeImpl) ReadProfileCalls(stub func([]byte) (client.Object, error)) {
	fake.readProfileMutex.Lock()
	defer fake.readProfileMutex.Unlock()
	fake.ReadProfileStub = stub
}

func (fake *FakeImpl) ReadProfileArgsForCall(i int) []byte {
	fake.readProfileMutex.RLock()
	defer fake.readProfileMutex.RUnlock()
	argsForCall := fake.readProfileArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeImpl) ReadProfileReturns(result1 client.Object, result2 error) {
	fake.readProfileMutex.Lock()
	defer fake.readProfileMutex.Unlock()
	fake.ReadProfileStub = nil
	fake.readProfileReturns = struct {
		result1 client.Object
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) ReadProfileReturnsOnCall(i int, result1 client.Object, result2 error) {
	fake.readProfileMutex.Lock()
	defer fake.readProfileMutex.Unlock()
	fake.ReadProfileStub = nil
	if fake.readProfileReturnsOnCall == nil {
		fake.readProfileReturnsOnCall = make(map[int]struct {
			result1 client.Object
			result2 error
		})
	}
	fake.readProfileReturnsOnCall[i] = struct {
		result1 client.Object
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) RemoveAll(arg1 string) error {
	fake.removeAllMutex.Lock()
	ret, specificReturn := fake.removeAllReturnsOnCall[len(fake.removeAllArgsForCall)]
	fake.removeAllArgsForCall = append(fake.removeAllArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.RemoveAllStub
	fakeReturns := fake.removeAllReturns
	fake.recordInvocation("RemoveAll", []interface{}{arg1})
	fake.removeAllMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeImpl) RemoveAllCallCount() int {
	fake.removeAllMutex.RLock()
	defer fake.removeAllMutex.RUnlock()
	return len(fake.removeAllArgsForCall)
}

func (fake *FakeImpl) RemoveAllCalls(stub func(string) error) {
	fake.removeAllMutex.Lock()
	defer fake.removeAllMutex.Unlock()
	fake.RemoveAllStub = stub
}

func (fake *FakeImpl) RemoveAllArgsForCall(i int) string {
	fake.removeAllMutex.RLock()
	defer fake.removeAllMutex.RUnlock()
	argsForCall := fake.removeAllArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeImpl) RemoveAllReturns(result1 error) {
	fake.removeAllMutex.Lock()
	defer fake.removeAllMutex.Unlock()
	fake.RemoveAllStub = nil
	fake.removeAllReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeImpl) RemoveAllReturnsOnCall(i int, result1 error) {
	fake.removeAllMutex.Lock()
	defer fake.removeAllMutex.Unlock()
	fake.RemoveAllStub = nil
	if fake.removeAllReturnsOnCall == nil {
		fake.removeAllReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeAllReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeImpl) SignCmd(arg1 *options.RootOptions, arg2 options.KeyOpts, arg3 options.SignOptions, arg4 []string) error {
	var arg4Copy []string
	if arg4 != nil {
		arg4Copy = make([]string, len(arg4))
		copy(arg4Copy, arg4)
	}
	fake.signCmdMutex.Lock()
	ret, specificReturn := fake.signCmdReturnsOnCall[len(fake.signCmdArgsForCall)]
	fake.signCmdArgsForCall = append(fake.signCmdArgsForCall, struct {
		arg1 *options.RootOptions
		arg2 options.KeyOpts
		arg3 options.SignOptions
		arg4 []string
	}{arg1, arg2, arg3, arg4Copy})
	stub := fake.SignCmdStub
	fakeReturns := fake.signCmdReturns
	fake.recordInvocation("SignCmd", []interface{}{arg1, arg2, arg3, arg4Copy})
	fake.signCmdMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeImpl) SignCmdCallCount() int {
	fake.signCmdMutex.RLock()
	defer fake.signCmdMutex.RUnlock()
	return len(fake.signCmdArgsForCall)
}

func (fake *FakeImpl) SignCmdCalls(stub func(*options.RootOptions, options.KeyOpts, options.SignOptions, []string) error) {
	fake.signCmdMutex.Lock()
	defer fake.signCmdMutex.Unlock()
	fake.SignCmdStub = stub
}

func (fake *FakeImpl) SignCmdArgsForCall(i int) (*options.RootOptions, options.KeyOpts, options.SignOptions, []string) {
	fake.signCmdMutex.RLock()
	defer fake.signCmdMutex.RUnlock()
	argsForCall := fake.signCmdArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeImpl) SignCmdReturns(result1 error) {
	fake.signCmdMutex.Lock()
	defer fake.signCmdMutex.Unlock()
	fake.SignCmdStub = nil
	fake.signCmdReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeImpl) SignCmdReturnsOnCall(i int, result1 error) {
	fake.signCmdMutex.Lock()
	defer fake.signCmdMutex.Unlock()
	fake.SignCmdStub = nil
	if fake.signCmdReturnsOnCall == nil {
		fake.signCmdReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.signCmdReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeImpl) StoreAdd(arg1 context.Context, arg2 *file.Store, arg3 string, arg4 string, arg5 string) (v1.Descriptor, error) {
	fake.storeAddMutex.Lock()
	ret, specificReturn := fake.storeAddReturnsOnCall[len(fake.storeAddArgsForCall)]
	fake.storeAddArgsForCall = append(fake.storeAddArgsForCall, struct {
		arg1 context.Context
		arg2 *file.Store
		arg3 string
		arg4 string
		arg5 string
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.StoreAddStub
	fakeReturns := fake.storeAddReturns
	fake.recordInvocation("StoreAdd", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.storeAddMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeImpl) StoreAddCallCount() int {
	fake.storeAddMutex.RLock()
	defer fake.storeAddMutex.RUnlock()
	return len(fake.storeAddArgsForCall)
}

func (fake *FakeImpl) StoreAddCalls(stub func(context.Context, *file.Store, string, string, string) (v1.Descriptor, error)) {
	fake.storeAddMutex.Lock()
	defer fake.storeAddMutex.Unlock()
	fake.StoreAddStub = stub
}

func (fake *FakeImpl) StoreAddArgsForCall(i int) (context.Context, *file.Store, string, string, string) {
	fake.storeAddMutex.RLock()
	defer fake.storeAddMutex.RUnlock()
	argsForCall := fake.storeAddArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeImpl) StoreAddReturns(result1 v1.Descriptor, result2 error) {
	fake.storeAddMutex.Lock()
	defer fake.storeAddMutex.Unlock()
	fake.StoreAddStub = nil
	fake.storeAddReturns = struct {
		result1 v1.Descriptor
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) StoreAddReturnsOnCall(i int, result1 v1.Descriptor, result2 error) {
	fake.storeAddMutex.Lock()
	defer fake.storeAddMutex.Unlock()
	fake.StoreAddStub = nil
	if fake.storeAddReturnsOnCall == nil {
		fake.storeAddReturnsOnCall = make(map[int]struct {
			result1 v1.Descriptor
			result2 error
		})
	}
	fake.storeAddReturnsOnCall[i] = struct {
		result1 v1.Descriptor
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) StoreTag(arg1 context.Context, arg2 *file.Store, arg3 v1.Descriptor, arg4 string) error {
	fake.storeTagMutex.Lock()
	ret, specificReturn := fake.storeTagReturnsOnCall[len(fake.storeTagArgsForCall)]
	fake.storeTagArgsForCall = append(fake.storeTagArgsForCall, struct {
		arg1 context.Context
		arg2 *file.Store
		arg3 v1.Descriptor
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.StoreTagStub
	fakeReturns := fake.storeTagReturns
	fake.recordInvocation("StoreTag", []interface{}{arg1, arg2, arg3, arg4})
	fake.storeTagMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeImpl) StoreTagCallCount() int {
	fake.storeTagMutex.RLock()
	defer fake.storeTagMutex.RUnlock()
	return len(fake.storeTagArgsForCall)
}

func (fake *FakeImpl) StoreTagCalls(stub func(context.Context, *file.Store, v1.Descriptor, string) error) {
	fake.storeTagMutex.Lock()
	defer fake.storeTagMutex.Unlock()
	fake.StoreTagStub = stub
}

func (fake *FakeImpl) StoreTagArgsForCall(i int) (context.Context, *file.Store, v1.Descriptor, string) {
	fake.storeTagMutex.RLock()
	defer fake.storeTagMutex.RUnlock()
	argsForCall := fake.storeTagArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeImpl) StoreTagReturns(result1 error) {
	fake.storeTagMutex.Lock()
	defer fake.storeTagMutex.Unlock()
	fake.StoreTagStub = nil
	fake.storeTagReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeImpl) StoreTagReturnsOnCall(i int, result1 error) {
	fake.storeTagMutex.Lock()
	defer fake.storeTagMutex.Unlock()
	fake.StoreTagStub = nil
	if fake.storeTagReturnsOnCall == nil {
		fake.storeTagReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.storeTagReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeImpl) VerifyCmd(arg1 context.Context, arg2 verify.VerifyCommand, arg3 string) error {
	fake.verifyCmdMutex.Lock()
	ret, specificReturn := fake.verifyCmdReturnsOnCall[len(fake.verifyCmdArgsForCall)]
	fake.verifyCmdArgsForCall = append(fake.verifyCmdArgsForCall, struct {
		arg1 context.Context
		arg2 verify.VerifyCommand
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.VerifyCmdStub
	fakeReturns := fake.verifyCmdReturns
	fake.recordInvocation("VerifyCmd", []interface{}{arg1, arg2, arg3})
	fake.verifyCmdMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeImpl) VerifyCmdCallCount() int {
	fake.verifyCmdMutex.RLock()
	defer fake.verifyCmdMutex.RUnlock()
	return len(fake.verifyCmdArgsForCall)
}

func (fake *FakeImpl) VerifyCmdCalls(stub func(context.Context, verify.VerifyCommand, string) error) {
	fake.verifyCmdMutex.Lock()
	defer fake.verifyCmdMutex.Unlock()
	fake.VerifyCmdStub = stub
}

func (fake *FakeImpl) VerifyCmdArgsForCall(i int) (context.Context, verify.VerifyCommand, string) {
	fake.verifyCmdMutex.RLock()
	defer fake.verifyCmdMutex.RUnlock()
	argsForCall := fake.verifyCmdArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeImpl) VerifyCmdReturns(result1 error) {
	fake.verifyCmdMutex.Lock()
	defer fake.verifyCmdMutex.Unlock()
	fake.VerifyCmdStub = nil
	fake.verifyCmdReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeImpl) VerifyCmdReturnsOnCall(i int, result1 error) {
	fake.verifyCmdMutex.Lock()
	defer fake.verifyCmdMutex.Unlock()
	fake.VerifyCmdStub = nil
	if fake.verifyCmdReturnsOnCall == nil {
		fake.verifyCmdReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.verifyCmdReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeImpl) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.clientSecretMutex.RLock()
	defer fake.clientSecretMutex.RUnlock()
	fake.copyMutex.RLock()
	defer fake.copyMutex.RUnlock()
	fake.fileCloseMutex.RLock()
	defer fake.fileCloseMutex.RUnlock()
	fake.fileNewMutex.RLock()
	defer fake.fileNewMutex.RUnlock()
	fake.filepathAbsMutex.RLock()
	defer fake.filepathAbsMutex.RUnlock()
	fake.mkdirTempMutex.RLock()
	defer fake.mkdirTempMutex.RUnlock()
	fake.newRepositoryMutex.RLock()
	defer fake.newRepositoryMutex.RUnlock()
	fake.packManifestMutex.RLock()
	defer fake.packManifestMutex.RUnlock()
	fake.parseReferenceMutex.RLock()
	defer fake.parseReferenceMutex.RUnlock()
	fake.readFileMutex.RLock()
	defer fake.readFileMutex.RUnlock()
	fake.readProfileMutex.RLock()
	defer fake.readProfileMutex.RUnlock()
	fake.removeAllMutex.RLock()
	defer fake.removeAllMutex.RUnlock()
	fake.signCmdMutex.RLock()
	defer fake.signCmdMutex.RUnlock()
	fake.storeAddMutex.RLock()
	defer fake.storeAddMutex.RUnlock()
	fake.storeTagMutex.RLock()
	defer fake.storeTagMutex.RUnlock()
	fake.verifyCmdMutex.RLock()
	defer fake.verifyCmdMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeImpl) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
