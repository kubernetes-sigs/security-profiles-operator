// Copyright 2025 The Sigstore Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: rekor/v2/hashedrekord.proto

package protobuf

import (
	v1 "github.com/sigstore/protobuf-specs/gen/pb-go/common/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A request to add a hashedrekord v0.0.2 to the log
type HashedRekordRequestV002 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The hashed data
	Digest []byte `protobuf:"bytes,1,opt,name=digest,proto3" json:"digest,omitempty"`
	// A single signature over the hashed data with the verifier needed to validate it
	Signature     *Signature `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HashedRekordRequestV002) Reset() {
	*x = HashedRekordRequestV002{}
	mi := &file_rekor_v2_hashedrekord_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HashedRekordRequestV002) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashedRekordRequestV002) ProtoMessage() {}

func (x *HashedRekordRequestV002) ProtoReflect() protoreflect.Message {
	mi := &file_rekor_v2_hashedrekord_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashedRekordRequestV002.ProtoReflect.Descriptor instead.
func (*HashedRekordRequestV002) Descriptor() ([]byte, []int) {
	return file_rekor_v2_hashedrekord_proto_rawDescGZIP(), []int{0}
}

func (x *HashedRekordRequestV002) GetDigest() []byte {
	if x != nil {
		return x.Digest
	}
	return nil
}

func (x *HashedRekordRequestV002) GetSignature() *Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type HashedRekordLogEntryV002 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The hashed data
	Data *v1.HashOutput `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// A single signature over the hashed data with the verifier needed to validate it
	Signature     *Signature `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HashedRekordLogEntryV002) Reset() {
	*x = HashedRekordLogEntryV002{}
	mi := &file_rekor_v2_hashedrekord_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HashedRekordLogEntryV002) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashedRekordLogEntryV002) ProtoMessage() {}

func (x *HashedRekordLogEntryV002) ProtoReflect() protoreflect.Message {
	mi := &file_rekor_v2_hashedrekord_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashedRekordLogEntryV002.ProtoReflect.Descriptor instead.
func (*HashedRekordLogEntryV002) Descriptor() ([]byte, []int) {
	return file_rekor_v2_hashedrekord_proto_rawDescGZIP(), []int{1}
}

func (x *HashedRekordLogEntryV002) GetData() *v1.HashOutput {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *HashedRekordLogEntryV002) GetSignature() *Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

var File_rekor_v2_hashedrekord_proto protoreflect.FileDescriptor

const file_rekor_v2_hashedrekord_proto_rawDesc = "" +
	"\n" +
	"\x1brekor/v2/hashedrekord.proto\x12\x15dev.sigstore.rekor.v2\x1a\x1fgoogle/api/field_behavior.proto\x1a\x15sigstore_common.proto\x1a\x17rekor/v2/verifier.proto\"{\n" +
	"\x17HashedRekordRequestV002\x12\x1b\n" +
	"\x06digest\x18\x01 \x01(\fB\x03\xe0A\x02R\x06digest\x12C\n" +
	"\tsignature\x18\x02 \x01(\v2 .dev.sigstore.rekor.v2.SignatureB\x03\xe0A\x02R\tsignature\"\x9c\x01\n" +
	"\x18HashedRekordLogEntryV002\x12;\n" +
	"\x04data\x18\x01 \x01(\v2\".dev.sigstore.common.v1.HashOutputB\x03\xe0A\x02R\x04data\x12C\n" +
	"\tsignature\x18\x02 \x01(\v2 .dev.sigstore.rekor.v2.SignatureB\x03\xe0A\x02R\tsignatureB\x82\x01\n" +
	"\x1bdev.sigstore.proto.rekor.v2B\x13RekorV2HashedRekordP\x01Z6github.com/sigstore/rekor-tiles/pkg/generated/protobuf\xea\x02\x13Sigstore::Rekor::V2b\x06proto3"

var (
	file_rekor_v2_hashedrekord_proto_rawDescOnce sync.Once
	file_rekor_v2_hashedrekord_proto_rawDescData []byte
)

func file_rekor_v2_hashedrekord_proto_rawDescGZIP() []byte {
	file_rekor_v2_hashedrekord_proto_rawDescOnce.Do(func() {
		file_rekor_v2_hashedrekord_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_rekor_v2_hashedrekord_proto_rawDesc), len(file_rekor_v2_hashedrekord_proto_rawDesc)))
	})
	return file_rekor_v2_hashedrekord_proto_rawDescData
}

var file_rekor_v2_hashedrekord_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_rekor_v2_hashedrekord_proto_goTypes = []any{
	(*HashedRekordRequestV002)(nil),  // 0: dev.sigstore.rekor.v2.HashedRekordRequestV002
	(*HashedRekordLogEntryV002)(nil), // 1: dev.sigstore.rekor.v2.HashedRekordLogEntryV002
	(*Signature)(nil),                // 2: dev.sigstore.rekor.v2.Signature
	(*v1.HashOutput)(nil),            // 3: dev.sigstore.common.v1.HashOutput
}
var file_rekor_v2_hashedrekord_proto_depIdxs = []int32{
	2, // 0: dev.sigstore.rekor.v2.HashedRekordRequestV002.signature:type_name -> dev.sigstore.rekor.v2.Signature
	3, // 1: dev.sigstore.rekor.v2.HashedRekordLogEntryV002.data:type_name -> dev.sigstore.common.v1.HashOutput
	2, // 2: dev.sigstore.rekor.v2.HashedRekordLogEntryV002.signature:type_name -> dev.sigstore.rekor.v2.Signature
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_rekor_v2_hashedrekord_proto_init() }
func file_rekor_v2_hashedrekord_proto_init() {
	if File_rekor_v2_hashedrekord_proto != nil {
		return
	}
	file_rekor_v2_verifier_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_rekor_v2_hashedrekord_proto_rawDesc), len(file_rekor_v2_hashedrekord_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_rekor_v2_hashedrekord_proto_goTypes,
		DependencyIndexes: file_rekor_v2_hashedrekord_proto_depIdxs,
		MessageInfos:      file_rekor_v2_hashedrekord_proto_msgTypes,
	}.Build()
	File_rekor_v2_hashedrekord_proto = out.File
	file_rekor_v2_hashedrekord_proto_goTypes = nil
	file_rekor_v2_hashedrekord_proto_depIdxs = nil
}
