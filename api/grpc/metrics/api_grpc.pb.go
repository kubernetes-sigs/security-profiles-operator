//
//Copyright 2021 The Kubernetes Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: api/grpc/metrics/api.proto

package api_metrics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Metrics_AuditInc_FullMethodName = "/api_metrics.Metrics/AuditInc"
	Metrics_BpfInc_FullMethodName   = "/api_metrics.Metrics/BpfInc"
)

// MetricsClient is the client API for Metrics service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricsClient interface {
	AuditInc(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[AuditRequest, EmptyResponse], error)
	BpfInc(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[BpfRequest, EmptyResponse], error)
}

type metricsClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricsClient(cc grpc.ClientConnInterface) MetricsClient {
	return &metricsClient{cc}
}

func (c *metricsClient) AuditInc(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[AuditRequest, EmptyResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Metrics_ServiceDesc.Streams[0], Metrics_AuditInc_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AuditRequest, EmptyResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Metrics_AuditIncClient = grpc.ClientStreamingClient[AuditRequest, EmptyResponse]

func (c *metricsClient) BpfInc(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[BpfRequest, EmptyResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Metrics_ServiceDesc.Streams[1], Metrics_BpfInc_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BpfRequest, EmptyResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Metrics_BpfIncClient = grpc.ClientStreamingClient[BpfRequest, EmptyResponse]

// MetricsServer is the server API for Metrics service.
// All implementations must embed UnimplementedMetricsServer
// for forward compatibility.
type MetricsServer interface {
	AuditInc(grpc.ClientStreamingServer[AuditRequest, EmptyResponse]) error
	BpfInc(grpc.ClientStreamingServer[BpfRequest, EmptyResponse]) error
	mustEmbedUnimplementedMetricsServer()
}

// UnimplementedMetricsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMetricsServer struct{}

func (UnimplementedMetricsServer) AuditInc(grpc.ClientStreamingServer[AuditRequest, EmptyResponse]) error {
	return status.Errorf(codes.Unimplemented, "method AuditInc not implemented")
}
func (UnimplementedMetricsServer) BpfInc(grpc.ClientStreamingServer[BpfRequest, EmptyResponse]) error {
	return status.Errorf(codes.Unimplemented, "method BpfInc not implemented")
}
func (UnimplementedMetricsServer) mustEmbedUnimplementedMetricsServer() {}
func (UnimplementedMetricsServer) testEmbeddedByValue()                 {}

// UnsafeMetricsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricsServer will
// result in compilation errors.
type UnsafeMetricsServer interface {
	mustEmbedUnimplementedMetricsServer()
}

func RegisterMetricsServer(s grpc.ServiceRegistrar, srv MetricsServer) {
	// If the following call pancis, it indicates UnimplementedMetricsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Metrics_ServiceDesc, srv)
}

func _Metrics_AuditInc_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MetricsServer).AuditInc(&grpc.GenericServerStream[AuditRequest, EmptyResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Metrics_AuditIncServer = grpc.ClientStreamingServer[AuditRequest, EmptyResponse]

func _Metrics_BpfInc_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MetricsServer).BpfInc(&grpc.GenericServerStream[BpfRequest, EmptyResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Metrics_BpfIncServer = grpc.ClientStreamingServer[BpfRequest, EmptyResponse]

// Metrics_ServiceDesc is the grpc.ServiceDesc for Metrics service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Metrics_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api_metrics.Metrics",
	HandlerType: (*MetricsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AuditInc",
			Handler:       _Metrics_AuditInc_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BpfInc",
			Handler:       _Metrics_BpfInc_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api/grpc/metrics/api.proto",
}
